"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/valtio";
exports.ids = ["vendor-chunks/valtio"];
exports.modules = {

/***/ "(ssr)/./node_modules/valtio/esm/vanilla.mjs":
/*!*********************************************!*\
  !*** ./node_modules/valtio/esm/vanilla.mjs ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getVersion: () => (/* binding */ getVersion),\n/* harmony export */   proxy: () => (/* binding */ proxy),\n/* harmony export */   ref: () => (/* binding */ ref),\n/* harmony export */   snapshot: () => (/* binding */ snapshot),\n/* harmony export */   subscribe: () => (/* binding */ subscribe),\n/* harmony export */   unstable_buildProxyFunction: () => (/* binding */ unstable_buildProxyFunction)\n/* harmony export */ });\n/* harmony import */ var proxy_compare__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! proxy-compare */ \"(ssr)/./node_modules/proxy-compare/dist/index.modern.js\");\n\nconst isObject = (x)=>typeof x === \"object\" && x !== null;\nconst proxyStateMap = /* @__PURE__ */ new WeakMap();\nconst refSet = /* @__PURE__ */ new WeakSet();\nconst buildProxyFunction = (objectIs = Object.is, newProxy = (target, handler)=>new Proxy(target, handler), canProxy = (x)=>isObject(x) && !refSet.has(x) && (Array.isArray(x) || !(Symbol.iterator in x)) && !(x instanceof WeakMap) && !(x instanceof WeakSet) && !(x instanceof Error) && !(x instanceof Number) && !(x instanceof Date) && !(x instanceof String) && !(x instanceof RegExp) && !(x instanceof ArrayBuffer), shouldTrapDefineProperty = (desc)=>desc.configurable && desc.enumerable && desc.writable, defaultHandlePromise = (promise)=>{\n    switch(promise.status){\n        case \"fulfilled\":\n            return promise.value;\n        case \"rejected\":\n            throw promise.reason;\n        default:\n            throw promise;\n    }\n}, snapCache = /* @__PURE__ */ new WeakMap(), createSnapshot = (target, version, handlePromise = defaultHandlePromise)=>{\n    const cache = snapCache.get(target);\n    if ((cache == null ? void 0 : cache[0]) === version) {\n        return cache[1];\n    }\n    const snap = Array.isArray(target) ? [] : Object.create(Object.getPrototypeOf(target));\n    (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(snap, true);\n    snapCache.set(target, [\n        version,\n        snap\n    ]);\n    Reflect.ownKeys(target).forEach((key)=>{\n        if (Object.getOwnPropertyDescriptor(snap, key)) {\n            return;\n        }\n        const value = Reflect.get(target, key);\n        const desc = {\n            value,\n            enumerable: true,\n            // This is intentional to avoid copying with proxy-compare.\n            // It's still non-writable, so it avoids assigning a value.\n            configurable: true\n        };\n        if (refSet.has(value)) {\n            (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.markToTrack)(value, false);\n        } else if (value instanceof Promise) {\n            delete desc.value;\n            desc.get = ()=>handlePromise(value);\n        } else if (proxyStateMap.has(value)) {\n            const [target2, ensureVersion] = proxyStateMap.get(value);\n            desc.value = createSnapshot(target2, ensureVersion(), handlePromise);\n        }\n        Object.defineProperty(snap, key, desc);\n    });\n    return Object.preventExtensions(snap);\n}, proxyCache = /* @__PURE__ */ new WeakMap(), versionHolder = [\n    1,\n    1\n], proxyFunction = (initialObject)=>{\n    if (!isObject(initialObject)) {\n        throw new Error(\"object required\");\n    }\n    const found = proxyCache.get(initialObject);\n    if (found) {\n        return found;\n    }\n    let version = versionHolder[0];\n    const listeners = /* @__PURE__ */ new Set();\n    const notifyUpdate = (op, nextVersion = ++versionHolder[0])=>{\n        if (version !== nextVersion) {\n            version = nextVersion;\n            listeners.forEach((listener)=>listener(op, nextVersion));\n        }\n    };\n    let checkVersion = versionHolder[1];\n    const ensureVersion = (nextCheckVersion = ++versionHolder[1])=>{\n        if (checkVersion !== nextCheckVersion && !listeners.size) {\n            checkVersion = nextCheckVersion;\n            propProxyStates.forEach(([propProxyState])=>{\n                const propVersion = propProxyState[1](nextCheckVersion);\n                if (propVersion > version) {\n                    version = propVersion;\n                }\n            });\n        }\n        return version;\n    };\n    const createPropListener = (prop)=>(op, nextVersion)=>{\n            const newOp = [\n                ...op\n            ];\n            newOp[1] = [\n                prop,\n                ...newOp[1]\n            ];\n            notifyUpdate(newOp, nextVersion);\n        };\n    const propProxyStates = /* @__PURE__ */ new Map();\n    const addPropListener = (prop, propProxyState)=>{\n        if (( false ? 0 : void 0) !== \"production\" && propProxyStates.has(prop)) {\n            throw new Error(\"prop listener already exists\");\n        }\n        if (listeners.size) {\n            const remove = propProxyState[3](createPropListener(prop));\n            propProxyStates.set(prop, [\n                propProxyState,\n                remove\n            ]);\n        } else {\n            propProxyStates.set(prop, [\n                propProxyState\n            ]);\n        }\n    };\n    const removePropListener = (prop)=>{\n        var _a;\n        const entry = propProxyStates.get(prop);\n        if (entry) {\n            propProxyStates.delete(prop);\n            (_a = entry[1]) == null ? void 0 : _a.call(entry);\n        }\n    };\n    const addListener = (listener)=>{\n        listeners.add(listener);\n        if (listeners.size === 1) {\n            propProxyStates.forEach(([propProxyState, prevRemove], prop)=>{\n                if (( false ? 0 : void 0) !== \"production\" && prevRemove) {\n                    throw new Error(\"remove already exists\");\n                }\n                const remove = propProxyState[3](createPropListener(prop));\n                propProxyStates.set(prop, [\n                    propProxyState,\n                    remove\n                ]);\n            });\n        }\n        const removeListener = ()=>{\n            listeners.delete(listener);\n            if (listeners.size === 0) {\n                propProxyStates.forEach(([propProxyState, remove], prop)=>{\n                    if (remove) {\n                        remove();\n                        propProxyStates.set(prop, [\n                            propProxyState\n                        ]);\n                    }\n                });\n            }\n        };\n        return removeListener;\n    };\n    const baseObject = Array.isArray(initialObject) ? [] : Object.create(Object.getPrototypeOf(initialObject));\n    const trapSet = (hasPrevValue, prevValue, prop, value, setValue)=>{\n        if (hasPrevValue && (objectIs(prevValue, value) || proxyCache.has(value) && objectIs(prevValue, proxyCache.get(value)))) {\n            return;\n        }\n        removePropListener(prop);\n        if (isObject(value)) {\n            value = (0,proxy_compare__WEBPACK_IMPORTED_MODULE_0__.getUntracked)(value) || value;\n        }\n        let nextValue = value;\n        if (value instanceof Promise) {\n            value.then((v)=>{\n                value.status = \"fulfilled\";\n                value.value = v;\n                notifyUpdate([\n                    \"resolve\",\n                    [\n                        prop\n                    ],\n                    v\n                ]);\n            }).catch((e)=>{\n                value.status = \"rejected\";\n                value.reason = e;\n                notifyUpdate([\n                    \"reject\",\n                    [\n                        prop\n                    ],\n                    e\n                ]);\n            });\n        } else {\n            if (!proxyStateMap.has(value) && canProxy(value)) {\n                nextValue = proxyFunction(value);\n            }\n            const childProxyState = !refSet.has(nextValue) && proxyStateMap.get(nextValue);\n            if (childProxyState) {\n                addPropListener(prop, childProxyState);\n            }\n        }\n        setValue(nextValue);\n        notifyUpdate([\n            \"set\",\n            [\n                prop\n            ],\n            value,\n            prevValue\n        ]);\n    };\n    const handler = {\n        deleteProperty (target, prop) {\n            const prevValue = Reflect.get(target, prop);\n            removePropListener(prop);\n            const deleted = Reflect.deleteProperty(target, prop);\n            if (deleted) {\n                notifyUpdate([\n                    \"delete\",\n                    [\n                        prop\n                    ],\n                    prevValue\n                ]);\n            }\n            return deleted;\n        },\n        set (target, prop, value, receiver) {\n            const hasPrevValue = Reflect.has(target, prop);\n            const prevValue = Reflect.get(target, prop, receiver);\n            trapSet(hasPrevValue, prevValue, prop, value, (nextValue)=>{\n                Reflect.set(target, prop, nextValue, receiver);\n            });\n            return true;\n        },\n        defineProperty (target, prop, desc) {\n            if (shouldTrapDefineProperty(desc)) {\n                const prevDesc = Reflect.getOwnPropertyDescriptor(target, prop);\n                if (!prevDesc || shouldTrapDefineProperty(prevDesc)) {\n                    trapSet(!!prevDesc && \"value\" in prevDesc, prevDesc == null ? void 0 : prevDesc.value, prop, desc.value, (nextValue)=>{\n                        Reflect.defineProperty(target, prop, {\n                            ...desc,\n                            value: nextValue\n                        });\n                    });\n                    return true;\n                }\n            }\n            return Reflect.defineProperty(target, prop, desc);\n        }\n    };\n    const proxyObject = newProxy(baseObject, handler);\n    proxyCache.set(initialObject, proxyObject);\n    const proxyState = [\n        baseObject,\n        ensureVersion,\n        createSnapshot,\n        addListener\n    ];\n    proxyStateMap.set(proxyObject, proxyState);\n    Reflect.ownKeys(initialObject).forEach((key)=>{\n        const desc = Object.getOwnPropertyDescriptor(initialObject, key);\n        if (\"value\" in desc) {\n            proxyObject[key] = initialObject[key];\n            delete desc.value;\n            delete desc.writable;\n        }\n        Object.defineProperty(baseObject, key, desc);\n    });\n    return proxyObject;\n})=>[\n        // public functions\n        proxyFunction,\n        // shared state\n        proxyStateMap,\n        refSet,\n        // internal things\n        objectIs,\n        newProxy,\n        canProxy,\n        shouldTrapDefineProperty,\n        defaultHandlePromise,\n        snapCache,\n        createSnapshot,\n        proxyCache,\n        versionHolder\n    ];\nconst [defaultProxyFunction] = buildProxyFunction();\nfunction proxy(initialObject = {}) {\n    return defaultProxyFunction(initialObject);\n}\nfunction getVersion(proxyObject) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    return proxyState == null ? void 0 : proxyState[1]();\n}\nfunction subscribe(proxyObject, callback, notifyInSync) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    let promise;\n    const ops = [];\n    const addListener = proxyState[3];\n    let isListenerActive = false;\n    const listener = (op)=>{\n        ops.push(op);\n        if (notifyInSync) {\n            callback(ops.splice(0));\n            return;\n        }\n        if (!promise) {\n            promise = Promise.resolve().then(()=>{\n                promise = void 0;\n                if (isListenerActive) {\n                    callback(ops.splice(0));\n                }\n            });\n        }\n    };\n    const removeListener = addListener(listener);\n    isListenerActive = true;\n    return ()=>{\n        isListenerActive = false;\n        removeListener();\n    };\n}\nfunction snapshot(proxyObject, handlePromise) {\n    const proxyState = proxyStateMap.get(proxyObject);\n    if (( false ? 0 : void 0) !== \"production\" && !proxyState) {\n        console.warn(\"Please use proxy object\");\n    }\n    const [target, ensureVersion, createSnapshot] = proxyState;\n    return createSnapshot(target, ensureVersion(), handlePromise);\n}\nfunction ref(obj) {\n    refSet.add(obj);\n    return obj;\n}\nconst unstable_buildProxyFunction = buildProxyFunction;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/valtio/esm/vanilla.mjs\n");

/***/ })

};
;