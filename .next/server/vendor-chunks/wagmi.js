"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/wagmi";
exports.ids = ["vendor-chunks/wagmi"];
exports.modules = {

/***/ "(ssr)/./node_modules/wagmi/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/wagmi/dist/index.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddChainError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.AddChainError),\n/* harmony export */   ChainDoesNotSupportMulticallError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainDoesNotSupportMulticallError),\n/* harmony export */   ChainMismatchError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainMismatchError),\n/* harmony export */   ChainNotConfiguredError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ChainNotConfiguredError),\n/* harmony export */   Connector: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_14__.Connector),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ConnectorNotFoundError),\n/* harmony export */   Context: () => (/* binding */ Context),\n/* harmony export */   ContractMethodDoesNotExistError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ContractMethodDoesNotExistError),\n/* harmony export */   ContractMethodNoResultError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ContractMethodNoResultError),\n/* harmony export */   ContractMethodRevertedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ContractMethodRevertedError),\n/* harmony export */   ContractResultDecodeError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ContractResultDecodeError),\n/* harmony export */   ProviderChainsNotFound: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderChainsNotFound),\n/* harmony export */   ProviderRpcError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ProviderRpcError),\n/* harmony export */   ResourceUnavailableError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.ResourceUnavailableError),\n/* harmony export */   RpcError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.RpcError),\n/* harmony export */   SwitchChainError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.SwitchChainError),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.SwitchChainNotSupportedError),\n/* harmony export */   UserRejectedRequestError: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.UserRejectedRequestError),\n/* harmony export */   WagmiConfig: () => (/* binding */ WagmiConfig),\n/* harmony export */   configureChains: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.configureChains),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createStorage: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createStorage),\n/* harmony export */   deepEqual: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual),\n/* harmony export */   deserialize: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deserialize),\n/* harmony export */   erc20ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc20ABI),\n/* harmony export */   erc4626ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc4626ABI),\n/* harmony export */   erc721ABI: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.erc721ABI),\n/* harmony export */   goerli: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_15__.goerli),\n/* harmony export */   mainnet: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_15__.mainnet),\n/* harmony export */   paginatedIndexesConfig: () => (/* binding */ paginatedIndexesConfig),\n/* harmony export */   readContracts: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts),\n/* harmony export */   sepolia: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_15__.sepolia),\n/* harmony export */   serialize: () => (/* reexport safe */ _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.serialize),\n/* harmony export */   useAccount: () => (/* binding */ useAccount),\n/* harmony export */   useBalance: () => (/* binding */ useBalance),\n/* harmony export */   useBlockNumber: () => (/* binding */ useBlockNumber),\n/* harmony export */   useChainId: () => (/* binding */ useChainId),\n/* harmony export */   useClient: () => (/* binding */ useClient),\n/* harmony export */   useConnect: () => (/* binding */ useConnect),\n/* harmony export */   useContract: () => (/* binding */ useContract),\n/* harmony export */   useContractEvent: () => (/* binding */ useContractEvent),\n/* harmony export */   useContractInfiniteReads: () => (/* binding */ useContractInfiniteReads),\n/* harmony export */   useContractRead: () => (/* binding */ useContractRead),\n/* harmony export */   useContractReads: () => (/* binding */ useContractReads),\n/* harmony export */   useContractWrite: () => (/* binding */ useContractWrite),\n/* harmony export */   useDisconnect: () => (/* binding */ useDisconnect),\n/* harmony export */   useEnsAddress: () => (/* binding */ useEnsAddress),\n/* harmony export */   useEnsAvatar: () => (/* binding */ useEnsAvatar),\n/* harmony export */   useEnsName: () => (/* binding */ useEnsName),\n/* harmony export */   useEnsResolver: () => (/* binding */ useEnsResolver),\n/* harmony export */   useFeeData: () => (/* binding */ useFeeData),\n/* harmony export */   useInfiniteQuery: () => (/* binding */ useInfiniteQuery),\n/* harmony export */   useMutation: () => (/* binding */ useMutation),\n/* harmony export */   useNetwork: () => (/* binding */ useNetwork),\n/* harmony export */   usePrepareContractWrite: () => (/* binding */ usePrepareContractWrite),\n/* harmony export */   usePrepareSendTransaction: () => (/* binding */ usePrepareSendTransaction),\n/* harmony export */   useProvider: () => (/* binding */ useProvider),\n/* harmony export */   useQuery: () => (/* binding */ useQuery),\n/* harmony export */   useQueryClient: () => (/* binding */ useQueryClient2),\n/* harmony export */   useSendTransaction: () => (/* binding */ useSendTransaction),\n/* harmony export */   useSignMessage: () => (/* binding */ useSignMessage),\n/* harmony export */   useSignTypedData: () => (/* binding */ useSignTypedData),\n/* harmony export */   useSigner: () => (/* binding */ useSigner),\n/* harmony export */   useSwitchNetwork: () => (/* binding */ useSwitchNetwork),\n/* harmony export */   useToken: () => (/* binding */ useToken),\n/* harmony export */   useTransaction: () => (/* binding */ useTransaction),\n/* harmony export */   useWaitForTransaction: () => (/* binding */ useWaitForTransaction),\n/* harmony export */   useWatchPendingTransactions: () => (/* binding */ useWatchPendingTransactions),\n/* harmony export */   useWebSocketProvider: () => (/* binding */ useWebSocketProvider)\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryClient.mjs\");\n/* harmony import */ var _tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/react-query-persist-client */ \"(ssr)/./node_modules/@tanstack/query-persist-client-core/build/lib/persist.mjs\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-GISSYJN5.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryClientProvider.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/isRestoring.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/QueryErrorResetBoundary.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/notifyManager.mjs\");\n/* harmony import */ var use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! use-sync-external-store/shim/index.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/index.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/infiniteQueryObserver.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/utils.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/react-query/build/lib/useMutation.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/./node_modules/@tanstack/query-core/build/lib/queryObserver.mjs\");\n/* harmony import */ var use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! use-sync-external-store/shim/with-selector.js */ \"(ssr)/./node_modules/use-sync-external-store/shim/with-selector.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-5NCTPR6C.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/chains/dist/index.mjs\");\n// src/client.ts\n\n\n\n\nfunction createClient({ queryClient = new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_0__.QueryClient({\n    defaultOptions: {\n        queries: {\n            cacheTime: 1e3 * 60 * 60 * 24,\n            networkMode: \"offlineFirst\",\n            refetchOnWindowFocus: false,\n            retry: 0\n        },\n        mutations: {\n            networkMode: \"offlineFirst\"\n        }\n    }\n}), storage = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createStorage)({\n    storage:  false ? 0 : _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.noopStorage\n}), persister =  false ? 0 : void 0, ...config }) {\n    const client = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.createClient)({\n        ...config,\n        storage\n    });\n    if (persister) (0,_tanstack_react_query_persist_client__WEBPACK_IMPORTED_MODULE_2__.persistQueryClient)({\n        queryClient,\n        persister,\n        dehydrateOptions: {\n            shouldDehydrateQuery: (query)=>query.cacheTime !== 0 && query.queryKey[0].persist !== false\n        }\n    });\n    return Object.assign(client, {\n        queryClient\n    });\n}\n// src/context.ts\n\n\nvar Context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createContext(void 0);\nvar queryClientContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createContext(void 0);\nfunction WagmiConfig({ children, client }) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(Context.Provider, {\n        children: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_3__.createElement(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.QueryClientProvider, {\n            children,\n            client: client.queryClient,\n            context: queryClientContext\n        }),\n        value: client\n    });\n}\nfunction useClient() {\n    const client = react__WEBPACK_IMPORTED_MODULE_3__.useContext(Context);\n    if (!client) throw new Error([\n        \"`useClient` must be used within `WagmiConfig`.\\n\",\n        \"Read more: https://wagmi.sh/react/WagmiConfig\"\n    ].join(\"\\n\"));\n    return client;\n}\n// src/hooks/accounts/useAccount.ts\n\n\n// src/hooks/utils/query/useBaseQuery.ts\n\n\n// src/hooks/utils/useSyncExternalStore.ts\n\nvar useSyncExternalStore2 = use_sync_external_store_shim_index_js__WEBPACK_IMPORTED_MODULE_5__.useSyncExternalStore;\n// src/hooks/utils/query/utils.ts\nfunction isQueryKey(value) {\n    return Array.isArray(value);\n}\nfunction parseQueryArgs(arg1, arg2, arg3) {\n    if (!isQueryKey(arg1)) {\n        return arg1;\n    }\n    if (typeof arg2 === \"function\") {\n        return {\n            ...arg3,\n            queryKey: arg1,\n            queryFn: arg2\n        };\n    }\n    return {\n        ...arg2,\n        queryKey: arg1\n    };\n}\nfunction shouldThrowError(_useErrorBoundary, params) {\n    if (typeof _useErrorBoundary === \"function\") {\n        return _useErrorBoundary(...params);\n    }\n    return !!_useErrorBoundary;\n}\nfunction trackResult(result, observer) {\n    const trackedResult = {};\n    Object.keys(result).forEach((key)=>{\n        Object.defineProperty(trackedResult, key, {\n            configurable: false,\n            enumerable: true,\n            get: ()=>{\n                observer.trackedProps.add(key);\n                return result[key];\n            }\n        });\n    });\n    return trackedResult;\n}\n// src/hooks/utils/query/useBaseQuery.ts\nfunction useBaseQuery(options, Observer) {\n    const queryClient = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQueryClient)({\n        context: options.context\n    });\n    const isRestoring = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.useIsRestoring)();\n    const errorResetBoundary = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_7__.useQueryErrorResetBoundary)();\n    const defaultedOptions = queryClient.defaultQueryOptions(options);\n    defaultedOptions._optimisticResults = isRestoring ? \"isRestoring\" : \"optimistic\";\n    if (defaultedOptions.onError) {\n        defaultedOptions.onError = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(defaultedOptions.onError);\n    }\n    if (defaultedOptions.onSuccess) {\n        defaultedOptions.onSuccess = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(defaultedOptions.onSuccess);\n    }\n    if (defaultedOptions.onSettled) {\n        defaultedOptions.onSettled = _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(defaultedOptions.onSettled);\n    }\n    if (defaultedOptions.suspense) {\n        if (typeof defaultedOptions.staleTime !== \"number\") {\n            defaultedOptions.staleTime = 1e3;\n        }\n    }\n    if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n        if (!errorResetBoundary.isReset()) {\n            defaultedOptions.retryOnMount = false;\n        }\n    }\n    const [observer] = react__WEBPACK_IMPORTED_MODULE_3__.useState(()=>new Observer(queryClient, defaultedOptions));\n    const result = observer.getOptimisticResult(defaultedOptions);\n    useSyncExternalStore2(react__WEBPACK_IMPORTED_MODULE_3__.useCallback((onStoreChange)=>isRestoring ? ()=>void 0 : observer.subscribe(_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.notifyManager.batchCalls(onStoreChange)), [\n        observer,\n        isRestoring\n    ]), ()=>observer.getCurrentResult(), ()=>observer.getCurrentResult());\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        errorResetBoundary.clearReset();\n    }, [\n        errorResetBoundary\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        observer.setOptions(defaultedOptions, {\n            listeners: false\n        });\n    }, [\n        defaultedOptions,\n        observer\n    ]);\n    if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n        throw observer.fetchOptimistic(defaultedOptions).then(({ data })=>{\n            defaultedOptions.onSuccess?.(data);\n            defaultedOptions.onSettled?.(data, null);\n        }).catch((error)=>{\n            errorResetBoundary.clearReset();\n            defaultedOptions.onError?.(error);\n            defaultedOptions.onSettled?.(void 0, error);\n        });\n    }\n    if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.useErrorBoundary, [\n        result.error,\n        observer.getCurrentQuery()\n    ])) {\n        throw result.error;\n    }\n    const status = result.status === \"loading\" && result.fetchStatus === \"idle\" ? \"idle\" : result.status;\n    const isIdle = status === \"idle\";\n    const isLoading = status === \"loading\" && result.fetchStatus === \"fetching\";\n    return {\n        ...result,\n        defaultedOptions,\n        isIdle,\n        isLoading,\n        observer,\n        status\n    };\n}\n// src/hooks/utils/query/useInfiniteQuery.ts\n\nfunction useInfiniteQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const baseQuery = useBaseQuery({\n        context: queryClientContext,\n        ...parsedOptions\n    }, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.InfiniteQueryObserver);\n    const result = {\n        data: baseQuery.data,\n        error: baseQuery.error,\n        fetchNextPage: baseQuery.fetchNextPage,\n        fetchStatus: baseQuery.fetchStatus,\n        hasNextPage: baseQuery.hasNextPage,\n        isError: baseQuery.isError,\n        isFetched: baseQuery.isFetched,\n        isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n        isFetching: baseQuery.isFetching,\n        isFetchingNextPage: baseQuery.isFetchingNextPage,\n        isIdle: baseQuery.isIdle,\n        isLoading: baseQuery.isLoading,\n        isRefetching: baseQuery.isRefetching,\n        isSuccess: baseQuery.isSuccess,\n        refetch: baseQuery.refetch,\n        status: baseQuery.status,\n        internal: {\n            dataUpdatedAt: baseQuery.dataUpdatedAt,\n            errorUpdatedAt: baseQuery.errorUpdatedAt,\n            failureCount: baseQuery.failureCount,\n            isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n            isLoadingError: baseQuery.isLoadingError,\n            isPaused: baseQuery.isPaused,\n            isPlaceholderData: baseQuery.isPlaceholderData,\n            isPreviousData: baseQuery.isPreviousData,\n            isRefetchError: baseQuery.isRefetchError,\n            isStale: baseQuery.isStale,\n            remove: baseQuery.remove\n        }\n    };\n    return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n// src/hooks/utils/query/useMutation.ts\n\nfunction useMutation(arg1, arg2, arg3) {\n    const options = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.parseMutationArgs)(arg1, arg2, arg3);\n    return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useMutation)({\n        context: queryClientContext,\n        ...options\n    });\n}\n// src/hooks/utils/query/useQuery.ts\n\nfunction useQuery(arg1, arg2, arg3) {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3);\n    const baseQuery = useBaseQuery({\n        context: queryClientContext,\n        ...parsedOptions\n    }, _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.QueryObserver);\n    const result = {\n        data: baseQuery.data,\n        error: baseQuery.error,\n        fetchStatus: baseQuery.fetchStatus,\n        isError: baseQuery.isError,\n        isFetched: baseQuery.isFetched,\n        isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n        isFetching: baseQuery.isFetching,\n        isIdle: baseQuery.isIdle,\n        isLoading: baseQuery.isLoading,\n        isRefetching: baseQuery.isRefetching,\n        isSuccess: baseQuery.isSuccess,\n        refetch: baseQuery.refetch,\n        status: baseQuery.status,\n        internal: {\n            dataUpdatedAt: baseQuery.dataUpdatedAt,\n            errorUpdatedAt: baseQuery.errorUpdatedAt,\n            failureCount: baseQuery.failureCount,\n            isFetchedAfterMount: baseQuery.isFetchedAfterMount,\n            isLoadingError: baseQuery.isLoadingError,\n            isPaused: baseQuery.isPaused,\n            isPlaceholderData: baseQuery.isPlaceholderData,\n            isPreviousData: baseQuery.isPreviousData,\n            isRefetchError: baseQuery.isRefetchError,\n            isStale: baseQuery.isStale,\n            remove: baseQuery.remove\n        }\n    };\n    return !baseQuery.defaultedOptions.notifyOnChangeProps ? trackResult(result, baseQuery.observer) : result;\n}\n// src/hooks/utils/query/useQueryClient.ts\n\nvar useQueryClient2 = ()=>(0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_4__.useQueryClient)({\n        context: queryClientContext\n    });\n// src/hooks/providers/useProvider.ts\n\n\nfunction useProvider({ chainId } = {}) {\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__.useSyncExternalStoreWithSelector)((cb)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchProvider)({\n            chainId\n        }, cb), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getProvider)({\n            chainId\n        }), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getProvider)({\n            chainId\n        }), (x)=>x, (a, b)=>a.network.chainId === b.network.chainId);\n}\n// src/hooks/providers/useWebSocketProvider.ts\n\n\nfunction useWebSocketProvider({ chainId } = {}) {\n    return (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__.useSyncExternalStoreWithSelector)((cb)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchWebSocketProvider)({\n            chainId\n        }, cb), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWebSocketProvider)({\n            chainId\n        }), ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getWebSocketProvider)({\n            chainId\n        }), (x)=>x, (a, b)=>a?.network.chainId === b?.network.chainId);\n}\n// src/hooks/utils/useChainId.ts\nfunction useChainId({ chainId } = {}) {\n    const provider = useProvider({\n        chainId\n    });\n    return provider.network.chainId;\n}\n// src/hooks/utils/useForceUpdate.ts\n\nfunction useForceUpdate() {\n    const [, forceUpdate] = react__WEBPACK_IMPORTED_MODULE_3__.useReducer((x)=>x + 1, 0);\n    return forceUpdate;\n}\n// src/hooks/network-status/useBlockNumber.ts\n\n\n\nfunction queryKey({ chainId, scopeKey }) {\n    return [\n        {\n            entity: \"blockNumber\",\n            chainId,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn({ queryKey: [{ chainId }] }) {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchBlockNumber)({\n        chainId\n    });\n}\nfunction useBlockNumber({ cacheTime = 0, chainId: chainId_, enabled = true, scopeKey, staleTime, suspense, watch = false, onBlock, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const provider = useProvider({\n        chainId\n    });\n    const webSocketProvider = useWebSocketProvider({\n        chainId\n    });\n    const queryClient = useQueryClient2();\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!enabled) return;\n        if (!watch && !onBlock) return;\n        const listener = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.debounce)((blockNumber)=>{\n            if (watch) queryClient.setQueryData(queryKey({\n                chainId,\n                scopeKey\n            }), blockNumber);\n            if (onBlock) onBlock(blockNumber);\n        }, 1);\n        const provider_ = webSocketProvider ?? provider;\n        provider_.on(\"block\", listener);\n        return ()=>{\n            provider_.off(\"block\", listener);\n        };\n    }, [\n        chainId,\n        scopeKey,\n        onBlock,\n        provider,\n        queryClient,\n        watch,\n        webSocketProvider,\n        enabled\n    ]);\n    return useQuery(queryKey({\n        scopeKey,\n        chainId\n    }), queryFn, {\n        cacheTime,\n        enabled,\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/network-status/useFeeData.ts\n\n\nfunction queryKey2({ chainId, formatUnits, scopeKey }) {\n    return [\n        {\n            entity: \"feeData\",\n            chainId,\n            formatUnits,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn2({ queryKey: [{ chainId, formatUnits }] }) {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchFeeData)({\n        chainId,\n        formatUnits\n    });\n}\nfunction useFeeData({ cacheTime, chainId: chainId_, enabled = true, formatUnits = \"wei\", scopeKey, staleTime, suspense, watch, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey2({\n            chainId,\n            formatUnits,\n            scopeKey\n        }), [\n        chainId,\n        formatUnits,\n        scopeKey\n    ]);\n    const feeDataQuery = useQuery(queryKey_, queryFn2, {\n        cacheTime,\n        enabled,\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    useInvalidateOnBlock({\n        chainId,\n        enabled: Boolean(enabled && watch),\n        queryKey: queryKey_\n    });\n    return feeDataQuery;\n}\n// src/hooks/utils/useInvalidateOnBlock.ts\nfunction useInvalidateOnBlock({ chainId, enabled, queryKey: queryKey17 }) {\n    const queryClient = useQueryClient2();\n    useBlockNumber({\n        chainId,\n        enabled,\n        onBlock: enabled ? ()=>queryClient.invalidateQueries(queryKey17) : void 0,\n        scopeKey: enabled ? void 0 : \"idle\"\n    });\n}\n// src/hooks/utils/useSyncExternalStoreWithTracked.ts\n\n\n\nvar isPlainObject = (obj)=>typeof obj === \"object\" && !Array.isArray(obj);\nfunction useSyncExternalStoreWithTracked(subscribe, getSnapshot, getServerSnapshot = getSnapshot, isEqual = _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual) {\n    const trackedKeys = react__WEBPACK_IMPORTED_MODULE_3__.useRef([]);\n    const result = (0,use_sync_external_store_shim_with_selector_js__WEBPACK_IMPORTED_MODULE_13__.useSyncExternalStoreWithSelector)(subscribe, getSnapshot, getServerSnapshot, (x)=>x, (a, b)=>{\n        if (isPlainObject(a) && isPlainObject(b) && trackedKeys.current.length) {\n            for (const key of trackedKeys.current){\n                const equal = isEqual(a[key], b[key]);\n                if (!equal) return false;\n            }\n            return true;\n        }\n        return isEqual(a, b);\n    });\n    if (isPlainObject(result)) {\n        const trackedResult = {\n            ...result\n        };\n        Object.defineProperties(trackedResult, Object.entries(trackedResult).reduce((res, [key, value])=>{\n            return {\n                ...res,\n                [key]: {\n                    configurable: false,\n                    enumerable: true,\n                    get: ()=>{\n                        if (!trackedKeys.current.includes(key)) {\n                            trackedKeys.current.push(key);\n                        }\n                        return value;\n                    }\n                }\n            };\n        }, {}));\n        return trackedResult;\n    }\n    return result;\n}\n// src/hooks/accounts/useAccount.ts\nfunction useAccount({ onConnect, onDisconnect } = {}) {\n    const watchAccount = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((callback)=>{\n        const client = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getClient)();\n        const unsubscribe = client.subscribe((state)=>({\n                address: state.data?.account,\n                connector: state.connector,\n                status: state.status\n            }), (curr, prev)=>{\n            if (!!onConnect && prev.status !== \"connected\" && curr.status === \"connected\") onConnect({\n                address: curr.address,\n                connector: curr.connector,\n                isReconnected: prev.status === \"reconnecting\"\n            });\n            if (!!onDisconnect && prev.status === \"connected\" && curr.status === \"disconnected\") onDisconnect();\n            return callback((0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getAccount)());\n        });\n        return unsubscribe;\n    }, [\n        onConnect,\n        onDisconnect\n    ]);\n    const account = useSyncExternalStoreWithTracked(watchAccount, _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getAccount);\n    const previousStatusRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef();\n    const { address, connector, status } = account;\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!!onConnect && previousStatusRef.current === void 0 && status === \"connected\") onConnect({\n            address,\n            connector,\n            isReconnected: true\n        });\n        previousStatusRef.current = status;\n    }, []);\n    return account;\n}\n// src/hooks/accounts/useBalance.ts\n\n\nfunction queryKey3({ address, chainId, formatUnits, scopeKey, token }) {\n    return [\n        {\n            entity: \"balance\",\n            address,\n            chainId,\n            formatUnits,\n            scopeKey,\n            token\n        }\n    ];\n}\nfunction queryFn3({ queryKey: [{ address, chainId, formatUnits, token }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchBalance)({\n        address,\n        chainId,\n        formatUnits,\n        token\n    });\n}\nfunction useBalance({ address, cacheTime, chainId: chainId_, enabled = true, formatUnits, scopeKey, staleTime, suspense, token, watch, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey3({\n            address,\n            chainId,\n            formatUnits,\n            scopeKey,\n            token\n        }), [\n        address,\n        chainId,\n        formatUnits,\n        scopeKey,\n        token\n    ]);\n    const balanceQuery = useQuery(queryKey_, queryFn3, {\n        cacheTime,\n        enabled: Boolean(enabled && address),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    useInvalidateOnBlock({\n        chainId,\n        enabled: Boolean(enabled && watch && address),\n        queryKey: queryKey_\n    });\n    return balanceQuery;\n}\n// src/hooks/accounts/useConnect.ts\n\n\nvar mutationKey = (args)=>[\n        {\n            entity: \"connect\",\n            ...args\n        }\n    ];\nvar mutationFn = (args)=>{\n    const { connector, chainId } = args;\n    if (!connector) throw new Error(\"connector is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.connect)({\n        connector,\n        chainId\n    });\n};\nfunction useConnect({ chainId, connector, onError, onMutate, onSettled, onSuccess } = {}) {\n    const client = useClient();\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey({\n        connector,\n        chainId\n    }), mutationFn, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const connect2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>{\n        return mutate({\n            chainId: args?.chainId ?? chainId,\n            connector: args?.connector ?? connector\n        });\n    }, [\n        chainId,\n        connector,\n        mutate\n    ]);\n    const connectAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>{\n        return mutateAsync({\n            chainId: args?.chainId ?? chainId,\n            connector: args?.connector ?? connector\n        });\n    }, [\n        chainId,\n        connector,\n        mutateAsync\n    ]);\n    return {\n        connect: connect2,\n        connectAsync,\n        connectors: client.connectors,\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        pendingConnector: variables?.connector,\n        reset,\n        status,\n        variables\n    };\n}\n// src/hooks/accounts/useDisconnect.ts\n\nvar mutationKey2 = [\n    {\n        entity: \"disconnect\"\n    }\n];\nvar mutationFn2 = ()=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.disconnect)();\nfunction useDisconnect({ onError, onMutate, onSettled, onSuccess } = {}) {\n    const { error, isError, isIdle, isLoading, isSuccess, mutate: disconnect2, mutateAsync: disconnectAsync, reset, status } = useMutation(mutationKey2, mutationFn2, {\n        ...onError ? {\n            onError (error2, _variables, context) {\n                onError(error2, context);\n            }\n        } : {},\n        onMutate,\n        ...onSettled ? {\n            onSettled (_data, error2, _variables, context) {\n                onSettled(error2, context);\n            }\n        } : {},\n        ...onSuccess ? {\n            onSuccess (_data, _variables, context) {\n                onSuccess(context);\n            }\n        } : {}\n    });\n    return {\n        disconnect: disconnect2,\n        disconnectAsync,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        status\n    };\n}\n// src/hooks/accounts/useNetwork.ts\n\nfunction useNetwork() {\n    return useSyncExternalStoreWithTracked(_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchNetwork, _wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getNetwork);\n}\n// src/hooks/accounts/useSigner.ts\n\n\nfunction queryKey4({ chainId }) {\n    return [\n        {\n            entity: \"signer\",\n            chainId,\n            persist: false\n        }\n    ];\n}\nfunction queryFn4({ queryKey: [{ chainId }] }) {\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchSigner)({\n        chainId\n    });\n}\nfunction useSigner({ chainId: chainId_, suspense, onError, onSettled, onSuccess } = {}) {\n    const { connector } = useAccount();\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const signerQuery = useQuery(queryKey4({\n        chainId\n    }), queryFn4, {\n        cacheTime: 0,\n        enabled: Boolean(connector),\n        staleTime: Infinity,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    const queryClient = useQueryClient2();\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        const unwatch = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.watchSigner)({\n            chainId\n        }, (signer)=>{\n            if (signer) queryClient.invalidateQueries(queryKey4({\n                chainId\n            }));\n            else queryClient.removeQueries(queryKey4({\n                chainId\n            }));\n        });\n        return unwatch;\n    }, [\n        queryClient,\n        chainId\n    ]);\n    return signerQuery;\n}\n// src/hooks/accounts/useSignMessage.ts\n\n\nvar mutationKey3 = (args)=>[\n        {\n            entity: \"signMessage\",\n            ...args\n        }\n    ];\nvar mutationFn3 = (args)=>{\n    const { message } = args;\n    if (!message) throw new Error(\"message is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.signMessage)({\n        message\n    });\n};\nfunction useSignMessage({ message, onError, onMutate, onSettled, onSuccess } = {}) {\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey3({\n        message\n    }), mutationFn3, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const signMessage2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutate(args || {\n            message\n        }), [\n        message,\n        mutate\n    ]);\n    const signMessageAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutateAsync(args || {\n            message\n        }), [\n        message,\n        mutateAsync\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        signMessage: signMessage2,\n        signMessageAsync,\n        status,\n        variables\n    };\n}\n// src/hooks/accounts/useSignTypedData.ts\n\n\nfunction mutationKey4({ domain, types, value }) {\n    return [\n        {\n            entity: \"signTypedData\",\n            domain,\n            types,\n            value\n        }\n    ];\n}\nfunction mutationFn4(args) {\n    const { domain, types, value } = args;\n    if (!domain) throw new Error(\"domain is required\");\n    if (!types) throw new Error(\"types is required\");\n    if (!value) throw new Error(\"value is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.signTypedData)({\n        domain,\n        types,\n        value\n    });\n}\nfunction useSignTypedData({ domain, types, value, onError, onMutate, onSettled, onSuccess } = {}) {\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey4({\n        domain,\n        types,\n        value\n    }), mutationFn4, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const signTypedData2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutate({\n            domain: args?.domain ?? domain,\n            types: args?.types ?? types,\n            value: args?.value ?? value\n        }), [\n        domain,\n        types,\n        value,\n        mutate\n    ]);\n    const signTypedDataAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutateAsync({\n            domain: args?.domain ?? domain,\n            types: args?.types ?? types,\n            value: args?.value ?? value\n        }), [\n        domain,\n        types,\n        value,\n        mutateAsync\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        signTypedData: signTypedData2,\n        signTypedDataAsync,\n        status,\n        variables\n    };\n}\n// src/hooks/accounts/useSwitchNetwork.ts\n\n\nvar mutationKey5 = (args)=>[\n        {\n            entity: \"switchNetwork\",\n            ...args\n        }\n    ];\nvar mutationFn5 = (args)=>{\n    const { chainId } = args;\n    if (!chainId) throw new Error(\"chainId is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.switchNetwork)({\n        chainId\n    });\n};\nfunction useSwitchNetwork({ chainId, throwForSwitchChainNotSupported, onError, onMutate, onSettled, onSuccess } = {}) {\n    const client = useClient();\n    const forceUpdate = useForceUpdate();\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey5({\n        chainId\n    }), mutationFn5, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const switchNetwork_ = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((chainId_)=>mutate({\n            chainId: chainId_ ?? chainId\n        }), [\n        chainId,\n        mutate\n    ]);\n    const switchNetworkAsync_ = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((chainId_)=>mutateAsync({\n            chainId: chainId_ ?? chainId\n        }), [\n        chainId,\n        mutateAsync\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        const unwatch = client.subscribe(({ chains, connector })=>({\n                chains,\n                connector\n            }), forceUpdate);\n        return unwatch;\n    }, [\n        client,\n        forceUpdate\n    ]);\n    let switchNetwork2;\n    let switchNetworkAsync;\n    const supportsSwitchChain = !!client.connector?.switchChain;\n    if (throwForSwitchChainNotSupported || supportsSwitchChain) {\n        switchNetwork2 = switchNetwork_;\n        switchNetworkAsync = switchNetworkAsync_;\n    }\n    return {\n        chains: client.chains ?? [],\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        pendingChainId: variables?.chainId,\n        reset,\n        status,\n        switchNetwork: switchNetwork2,\n        switchNetworkAsync,\n        variables\n    };\n}\n// src/hooks/contracts/useContract.ts\n\n\nfunction useContract({ address, abi, signerOrProvider } = {}) {\n    return react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        if (!address || !abi) return null;\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.getContract)({\n            address,\n            abi,\n            signerOrProvider: signerOrProvider === null ? void 0 : signerOrProvider\n        });\n    }, [\n        address,\n        abi,\n        signerOrProvider\n    ]);\n}\n// src/hooks/contracts/useContractEvent.ts\n\nfunction useContractEvent({ address, chainId, abi, listener, eventName, once } = {}) {\n    const provider = useProvider({\n        chainId\n    });\n    const webSocketProvider = useWebSocketProvider({\n        chainId\n    });\n    const contract = useContract({\n        address,\n        abi,\n        signerOrProvider: webSocketProvider ?? provider\n    });\n    const callbackRef = react__WEBPACK_IMPORTED_MODULE_3__.useRef(listener);\n    callbackRef.current = listener;\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!contract || !eventName) return;\n        const handler = (...event)=>callbackRef.current(...event);\n        if (once) contract.once(eventName, handler);\n        else contract.on(eventName, handler);\n        return ()=>{\n            contract.off(eventName, handler);\n        };\n    }, [\n        contract,\n        eventName\n    ]);\n}\n// src/hooks/contracts/useContractInfiniteReads.ts\n\n\n\nfunction queryKey5({ allowFailure, cacheKey, overrides, scopeKey }) {\n    return [\n        {\n            entity: \"readContractsInfinite\",\n            allowFailure,\n            cacheKey,\n            overrides,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn5({ contracts }) {\n    return ({ queryKey: [{ allowFailure, overrides }], pageParam })=>{\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts)({\n            allowFailure,\n            contracts: contracts(pageParam || void 0),\n            overrides\n        });\n    };\n}\nfunction useContractInfiniteReads({ allowFailure, cacheKey, cacheTime, contracts, enabled: enabled_ = true, getNextPageParam, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, overrides, scopeKey, select, staleTime, structuralSharing = (oldData, newData)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.replaceEqualDeep)(oldData, newData), suspense }) {\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey5({\n            allowFailure,\n            cacheKey,\n            overrides,\n            scopeKey\n        }), [\n        allowFailure,\n        cacheKey,\n        overrides,\n        scopeKey\n    ]);\n    const enabled = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        const enabled2 = Boolean(enabled_ && contracts);\n        return enabled2;\n    }, [\n        contracts,\n        enabled_\n    ]);\n    return useInfiniteQuery(queryKey_, queryFn5({\n        contracts\n    }), {\n        cacheTime,\n        enabled,\n        getNextPageParam,\n        isDataEqual,\n        keepPreviousData,\n        select,\n        staleTime,\n        structuralSharing,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\nfunction paginatedIndexesConfig(fn, { perPage, start, direction }) {\n    const contracts = (page = 0)=>[\n            ...Array(perPage).keys()\n        ].map((index)=>{\n            return direction === \"increment\" ? start + index + page * perPage : start - index - page * perPage;\n        }).filter((index)=>index >= 0).map(fn).flat();\n    return {\n        contracts,\n        getNextPageParam (lastPage, pages) {\n            return lastPage?.length === perPage ? pages.length : void 0;\n        }\n    };\n}\n// src/hooks/contracts/useContractRead.ts\n\n\n\nfunction queryKey6({ address, args, blockNumber, chainId, functionName, overrides, scopeKey }) {\n    return [\n        {\n            entity: \"readContract\",\n            address,\n            args,\n            blockNumber,\n            chainId,\n            functionName,\n            overrides,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn6({ abi }) {\n    return async ({ queryKey: [{ address, args, chainId, functionName, overrides }] })=>{\n        if (!abi) throw new Error(\"abi is required\");\n        if (!address) throw new Error(\"address is required\");\n        return await (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContract)({\n            address,\n            args,\n            chainId,\n            abi,\n            functionName,\n            overrides\n        }) ?? null;\n    };\n}\nfunction useContractRead({ abi, address, args, cacheOnBlock = false, cacheTime, chainId: chainId_, enabled: enabled_ = true, functionName, isDataEqual, onError, onSettled, onSuccess, overrides, scopeKey, select, staleTime, structuralSharing = (oldData, newData)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.replaceEqualDeep)(oldData, newData), suspense, watch } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const { data: blockNumber } = useBlockNumber({\n        chainId,\n        enabled: watch || cacheOnBlock,\n        scopeKey: watch || cacheOnBlock ? void 0 : \"idle\",\n        watch\n    });\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey6({\n            address,\n            args,\n            blockNumber: cacheOnBlock ? blockNumber : void 0,\n            chainId,\n            functionName,\n            overrides,\n            scopeKey\n        }), [\n        address,\n        args,\n        blockNumber,\n        cacheOnBlock,\n        chainId,\n        functionName,\n        overrides,\n        scopeKey\n    ]);\n    const enabled = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        let enabled2 = Boolean(enabled_ && abi && address && functionName);\n        if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n        return enabled2;\n    }, [\n        abi,\n        address,\n        blockNumber,\n        cacheOnBlock,\n        enabled_,\n        functionName\n    ]);\n    useInvalidateOnBlock({\n        chainId,\n        enabled: Boolean(enabled && watch && !cacheOnBlock),\n        queryKey: queryKey_\n    });\n    return useQuery(queryKey_, queryFn6({\n        abi\n    }), {\n        cacheTime,\n        enabled,\n        isDataEqual,\n        select (data) {\n            const result = abi && functionName ? (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.parseContractResult)({\n                abi,\n                data,\n                functionName\n            }) : data;\n            return select ? select(result) : result;\n        },\n        staleTime,\n        structuralSharing,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/contracts/useContractReads.ts\n\n\n\nfunction queryKey7({ allowFailure, blockNumber, chainId, contracts, overrides, scopeKey }) {\n    return [\n        {\n            entity: \"readContracts\",\n            allowFailure,\n            blockNumber,\n            chainId,\n            scopeKey,\n            contracts: (contracts ?? []).map(({ address, args, chainId: chainId2, functionName })=>({\n                    address,\n                    args,\n                    chainId: chainId2,\n                    functionName\n                })),\n            overrides\n        }\n    ];\n}\nfunction queryFn7({ abis }) {\n    return ({ queryKey: [{ allowFailure, contracts: contracts_, overrides }] })=>{\n        const contracts = contracts_.map((contract, i)=>({\n                ...contract,\n                abi: abis[i]\n            }));\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.readContracts)({\n            allowFailure,\n            contracts,\n            overrides\n        });\n    };\n}\nfunction useContractReads({ allowFailure = true, cacheOnBlock = false, cacheTime, contracts, enabled: enabled_ = true, isDataEqual, keepPreviousData, onError, onSettled, onSuccess, overrides, scopeKey, select, staleTime, structuralSharing = (oldData, newData)=>(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(oldData, newData) ? oldData : (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.replaceEqualDeep)(oldData, newData), suspense, watch } = {}) {\n    const { data: blockNumber } = useBlockNumber({\n        enabled: watch || cacheOnBlock,\n        watch\n    });\n    const chainId = useChainId();\n    const queryKey_ = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>queryKey7({\n            allowFailure,\n            blockNumber: cacheOnBlock ? blockNumber : void 0,\n            chainId,\n            contracts,\n            overrides,\n            scopeKey\n        }), [\n        allowFailure,\n        blockNumber,\n        cacheOnBlock,\n        chainId,\n        scopeKey,\n        contracts,\n        overrides\n    ]);\n    const enabled = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        let enabled2 = Boolean(enabled_ && contracts?.every((x)=>x.abi && x.address && x.functionName));\n        if (cacheOnBlock) enabled2 = Boolean(enabled2 && blockNumber);\n        return enabled2;\n    }, [\n        blockNumber,\n        cacheOnBlock,\n        contracts,\n        enabled_\n    ]);\n    useInvalidateOnBlock({\n        enabled: Boolean(enabled && watch && !cacheOnBlock),\n        queryKey: queryKey_\n    });\n    const abis = (contracts ?? []).map(({ abi })=>abi);\n    return useQuery(queryKey_, queryFn7({\n        abis\n    }), {\n        cacheTime,\n        enabled,\n        isDataEqual,\n        keepPreviousData,\n        staleTime,\n        select (data) {\n            const result = data.map((data2, i)=>{\n                const { abi, functionName } = contracts?.[i] ?? {};\n                return abi && functionName ? (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.parseContractResult)({\n                    abi,\n                    functionName,\n                    data: data2\n                }) : data2;\n            });\n            return select ? select(result) : result;\n        },\n        structuralSharing,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/contracts/useContractWrite.ts\n\n\nfunction mutationKey6({ address, chainId, abi, functionName, ...config }) {\n    const { request } = config;\n    const { args, overrides } = config;\n    return [\n        {\n            entity: \"writeContract\",\n            address,\n            args,\n            chainId,\n            abi,\n            functionName,\n            overrides,\n            request\n        }\n    ];\n}\nfunction mutationFn6(config) {\n    if (!config.address) throw new Error(\"address is required\");\n    if (!config.abi) throw new Error(\"abi is required\");\n    if (!config.functionName) throw new Error(\"functionName is required\");\n    switch(config.mode){\n        case \"prepared\":\n            {\n                if (!config.request) throw new Error(\"request is required\");\n                return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.writeContract)({\n                    mode: \"prepared\",\n                    address: config.address,\n                    chainId: config.chainId,\n                    abi: config.abi,\n                    functionName: config.functionName,\n                    request: config.request\n                });\n            }\n        case \"recklesslyUnprepared\":\n            return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.writeContract)({\n                address: config.address,\n                args: config.args,\n                chainId: config.chainId,\n                abi: config.abi,\n                functionName: config.functionName,\n                mode: \"recklesslyUnprepared\",\n                overrides: config.overrides\n            });\n    }\n}\nfunction useContractWrite(config = {}) {\n    const { address, abi, functionName, chainId, mode } = config;\n    const { request } = config;\n    const { args, overrides } = config;\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey6({\n        address,\n        abi,\n        functionName,\n        chainId,\n        mode,\n        args,\n        overrides,\n        request\n    }), mutationFn6, {\n        onError: config.onError,\n        onMutate: config.onMutate,\n        onSettled: config.onSettled,\n        onSuccess: config.onSuccess\n    });\n    const write = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        if (mode === \"prepared\") {\n            if (!request) return void 0;\n            return ()=>mutate({\n                    address,\n                    chainId,\n                    abi,\n                    functionName,\n                    mode: \"prepared\",\n                    request\n                });\n        }\n        return (overrideConfig)=>mutate({\n                address,\n                args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n                chainId,\n                abi,\n                functionName,\n                mode: \"recklesslyUnprepared\",\n                overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides\n            });\n    }, [\n        address,\n        chainId,\n        abi,\n        functionName,\n        mode,\n        mutate,\n        args,\n        overrides,\n        request\n    ]);\n    const writeAsync = react__WEBPACK_IMPORTED_MODULE_3__.useMemo(()=>{\n        if (mode === \"prepared\") {\n            if (!request) return void 0;\n            return ()=>mutateAsync({\n                    address,\n                    chainId,\n                    abi,\n                    functionName,\n                    mode: \"prepared\",\n                    request\n                });\n        }\n        return (overrideConfig)=>mutateAsync({\n                address,\n                args: overrideConfig?.recklesslySetUnpreparedArgs ?? args,\n                chainId,\n                abi,\n                functionName,\n                mode: \"recklesslyUnprepared\",\n                overrides: overrideConfig?.recklesslySetUnpreparedOverrides ?? overrides\n            });\n    }, [\n        address,\n        chainId,\n        abi,\n        functionName,\n        mode,\n        mutateAsync,\n        args,\n        overrides,\n        request\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        status,\n        variables,\n        write,\n        writeAsync\n    };\n}\n// src/hooks/contracts/usePrepareContractWrite.ts\n\nfunction queryKey8({ activeChainId, args, address, chainId, functionName, overrides, signerAddress }) {\n    return [\n        {\n            entity: \"prepareContractTransaction\",\n            activeChainId,\n            address,\n            args,\n            chainId,\n            functionName,\n            overrides,\n            signerAddress\n        }\n    ];\n}\nfunction queryFn8({ abi, signer }) {\n    return ({ queryKey: [{ args, address, chainId, functionName, overrides }] })=>{\n        if (!abi) throw new Error(\"abi is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.prepareWriteContract)({\n            abi,\n            args,\n            address,\n            chainId,\n            functionName,\n            overrides,\n            signer\n        });\n    };\n}\nfunction usePrepareContractWrite({ address, abi, functionName, chainId, args, overrides, cacheTime, enabled = true, scopeKey, staleTime, suspense, onError, onSettled, onSuccess } = {}) {\n    const { chain: activeChain } = useNetwork();\n    const { data: signer } = useSigner({\n        chainId\n    });\n    const prepareContractWriteQuery = useQuery(queryKey8({\n        activeChainId: activeChain?.id,\n        address,\n        args,\n        chainId,\n        functionName,\n        scopeKey,\n        signerAddress: signer?._address,\n        overrides\n    }), queryFn8({\n        abi,\n        signer\n    }), {\n        cacheTime,\n        enabled: Boolean(enabled && abi && address && functionName && signer),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    return Object.assign(prepareContractWriteQuery, {\n        config: {\n            abi,\n            address,\n            args,\n            chainId,\n            functionName,\n            mode: \"prepared\",\n            overrides,\n            request: void 0,\n            ...prepareContractWriteQuery.data\n        }\n    });\n}\n// src/hooks/contracts/useToken.ts\n\nfunction queryKey9({ address, chainId, formatUnits, scopeKey }) {\n    return [\n        {\n            entity: \"token\",\n            address,\n            chainId,\n            formatUnits,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn9({ queryKey: [{ address, chainId, formatUnits }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchToken)({\n        address,\n        chainId,\n        formatUnits\n    });\n}\nfunction useToken({ address, chainId: chainId_, formatUnits = \"ether\", cacheTime, enabled = true, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey9({\n        address,\n        chainId,\n        formatUnits,\n        scopeKey\n    }), queryFn9, {\n        cacheTime,\n        enabled: Boolean(enabled && address),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsAddress.ts\n\nfunction queryKey10({ chainId, name, scopeKey }) {\n    return [\n        {\n            entity: \"ensAddress\",\n            chainId,\n            name,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn10({ queryKey: [{ chainId, name }] }) {\n    if (!name) throw new Error(\"name is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsAddress)({\n        chainId,\n        name\n    });\n}\nfunction useEnsAddress({ cacheTime, chainId: chainId_, enabled = true, name, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey10({\n        chainId,\n        name,\n        scopeKey\n    }), queryFn10, {\n        cacheTime,\n        enabled: Boolean(enabled && chainId && name),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsAvatar.ts\n\nfunction queryKey11({ address, chainId, scopeKey }) {\n    return [\n        {\n            entity: \"ensAvatar\",\n            address,\n            chainId,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn11({ queryKey: [{ address, chainId }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsAvatar)({\n        address,\n        chainId\n    });\n}\nfunction useEnsAvatar({ address, cacheTime, chainId: chainId_, enabled = true, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey11({\n        address,\n        chainId,\n        scopeKey\n    }), queryFn11, {\n        cacheTime,\n        enabled: Boolean(enabled && address && chainId),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsName.ts\n\nfunction queryKey12({ address, chainId, scopeKey }) {\n    return [\n        {\n            entity: \"ensName\",\n            address,\n            chainId,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn12({ queryKey: [{ address, chainId }] }) {\n    if (!address) throw new Error(\"address is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsName)({\n        address,\n        chainId\n    });\n}\nfunction useEnsName({ address, cacheTime, chainId: chainId_, enabled = true, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey12({\n        address,\n        chainId,\n        scopeKey\n    }), queryFn12, {\n        cacheTime,\n        enabled: Boolean(enabled && address && chainId),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/ens/useEnsResolver.ts\n\nfunction queryKey13({ chainId, name, scopeKey }) {\n    return [\n        {\n            entity: \"ensResolver\",\n            chainId,\n            name,\n            scopeKey,\n            persist: false\n        }\n    ];\n}\nfunction queryFn13({ queryKey: [{ chainId, name }] }) {\n    if (!name) throw new Error(\"name is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchEnsResolver)({\n        chainId,\n        name\n    });\n}\nfunction useEnsResolver({ chainId: chainId_, name, enabled = true, scopeKey, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey13({\n        chainId,\n        name,\n        scopeKey\n    }), queryFn13, {\n        cacheTime: 0,\n        enabled: Boolean(enabled && chainId && name),\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/transactions/usePrepareSendTransaction.ts\n\nfunction queryKey14({ activeChainId, chainId, request, scopeKey, signerAddress }) {\n    return [\n        {\n            entity: \"prepareSendTransaction\",\n            activeChainId,\n            chainId,\n            request,\n            scopeKey,\n            signerAddress\n        }\n    ];\n}\nfunction queryFn14({ signer }) {\n    return ({ queryKey: [{ chainId, request }] })=>{\n        if (!request?.to) throw new Error(\"request.to is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.prepareSendTransaction)({\n            chainId,\n            request: {\n                ...request,\n                to: request.to\n            },\n            signer\n        });\n    };\n}\nfunction usePrepareSendTransaction({ chainId, request, cacheTime, enabled = true, scopeKey, staleTime = 1e3 * 60 * 60 * 24, suspense, onError, onSettled, onSuccess } = {}) {\n    const { chain: activeChain } = useNetwork();\n    const { data: signer } = useSigner({\n        chainId\n    });\n    const prepareSendTransactionQuery = useQuery(queryKey14({\n        activeChainId: activeChain?.id,\n        chainId,\n        request,\n        scopeKey,\n        signerAddress: signer?._address\n    }), queryFn14({\n        signer\n    }), {\n        cacheTime,\n        enabled: Boolean(enabled && signer && request && request.to),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n    return Object.assign(prepareSendTransactionQuery, {\n        config: {\n            request: void 0,\n            mode: \"prepared\",\n            ...prepareSendTransactionQuery.data\n        }\n    });\n}\n// src/hooks/transactions/useSendTransaction.ts\n\n\nvar mutationKey7 = (args)=>[\n        {\n            entity: \"sendTransaction\",\n            ...args\n        }\n    ];\nvar mutationFn7 = ({ chainId, mode, request })=>{\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.sendTransaction)({\n        chainId,\n        mode,\n        request\n    });\n};\nfunction useSendTransaction({ chainId, mode, request, onError, onMutate, onSettled, onSuccess }) {\n    const { data, error, isError, isIdle, isLoading, isSuccess, mutate, mutateAsync, reset, status, variables } = useMutation(mutationKey7({\n        chainId,\n        mode,\n        request\n    }), mutationFn7, {\n        onError,\n        onMutate,\n        onSettled,\n        onSuccess\n    });\n    const sendTransaction2 = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutate({\n            chainId,\n            mode,\n            request: args?.recklesslySetUnpreparedRequest ?? request\n        }), [\n        chainId,\n        mode,\n        mutate,\n        request\n    ]);\n    const sendTransactionAsync = react__WEBPACK_IMPORTED_MODULE_3__.useCallback((args)=>mutateAsync({\n            chainId,\n            mode,\n            request: args?.recklesslySetUnpreparedRequest ?? request\n        }), [\n        chainId,\n        mode,\n        mutateAsync,\n        request\n    ]);\n    return {\n        data,\n        error,\n        isError,\n        isIdle,\n        isLoading,\n        isSuccess,\n        reset,\n        sendTransaction: mode === \"prepared\" && !request ? void 0 : sendTransaction2,\n        sendTransactionAsync: mode === \"prepared\" && !request ? void 0 : sendTransactionAsync,\n        status,\n        variables\n    };\n}\n// src/hooks/transactions/useTransaction.ts\n\nfunction queryKey15({ chainId, hash, scopeKey }) {\n    return [\n        {\n            entity: \"transaction\",\n            chainId,\n            hash,\n            scopeKey\n        }\n    ];\n}\nfunction queryFn15({ queryKey: [{ chainId, hash }] }) {\n    if (!hash) throw new Error(\"hash is required\");\n    return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.fetchTransaction)({\n        chainId,\n        hash\n    });\n}\nfunction useTransaction({ cacheTime = 0, chainId: chainId_, enabled = true, hash, scopeKey, staleTime, suspense, onError, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey15({\n        chainId,\n        hash,\n        scopeKey\n    }), queryFn15, {\n        cacheTime,\n        enabled: Boolean(enabled && hash),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/transactions/useWaitForTransaction.ts\n\nfunction queryKey16({ confirmations, chainId, hash, scopeKey, timeout }) {\n    return [\n        {\n            entity: \"waitForTransaction\",\n            confirmations,\n            chainId,\n            hash,\n            scopeKey,\n            timeout\n        }\n    ];\n}\nfunction queryFn16({ onSpeedUp }) {\n    return ({ queryKey: [{ chainId, confirmations, hash, timeout }] })=>{\n        if (!hash) throw new Error(\"hash is required\");\n        return (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_1__.waitForTransaction)({\n            chainId,\n            confirmations,\n            hash,\n            onSpeedUp,\n            timeout\n        });\n    };\n}\nfunction useWaitForTransaction({ chainId: chainId_, confirmations, hash, timeout, cacheTime, enabled = true, scopeKey, staleTime, suspense, onError, onSpeedUp, onSettled, onSuccess } = {}) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    return useQuery(queryKey16({\n        chainId,\n        confirmations,\n        hash,\n        scopeKey,\n        timeout\n    }), queryFn16({\n        onSpeedUp\n    }), {\n        cacheTime,\n        enabled: Boolean(enabled && hash),\n        staleTime,\n        suspense,\n        onError,\n        onSettled,\n        onSuccess\n    });\n}\n// src/hooks/transactions/useWatchPendingTransactions.ts\n\nfunction useWatchPendingTransactions({ chainId: chainId_, enabled = true, listener }) {\n    const chainId = useChainId({\n        chainId: chainId_\n    });\n    const provider = useProvider({\n        chainId\n    });\n    const webSocketProvider = useWebSocketProvider({\n        chainId\n    });\n    react__WEBPACK_IMPORTED_MODULE_3__.useEffect(()=>{\n        if (!enabled) return;\n        const provider_ = webSocketProvider ?? provider;\n        provider_.on(\"pending\", listener);\n        return ()=>{\n            provider_.off(\"pending\", listener);\n        };\n    }, [\n        enabled,\n        listener,\n        provider,\n        webSocketProvider\n    ]);\n}\n// src/index.ts\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/wagmi/dist/index.js\n");

/***/ })

};
;