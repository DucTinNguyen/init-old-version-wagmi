"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@wagmi";
exports.ids = ["vendor-chunks/@wagmi"];
exports.modules = {

/***/ "(ssr)/./node_modules/@wagmi/chains/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/@wagmi/chains/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   arbitrum: () => (/* binding */ arbitrum),\n/* harmony export */   arbitrumGoerli: () => (/* binding */ arbitrumGoerli),\n/* harmony export */   arbitrumNova: () => (/* binding */ arbitrumNova),\n/* harmony export */   aurora: () => (/* binding */ aurora),\n/* harmony export */   auroraTestnet: () => (/* binding */ auroraTestnet),\n/* harmony export */   avalanche: () => (/* binding */ avalanche),\n/* harmony export */   avalancheFuji: () => (/* binding */ avalancheFuji),\n/* harmony export */   baseGoerli: () => (/* binding */ baseGoerli),\n/* harmony export */   boba: () => (/* binding */ boba),\n/* harmony export */   bronos: () => (/* binding */ bronos),\n/* harmony export */   bronosTestnet: () => (/* binding */ bronosTestnet),\n/* harmony export */   bsc: () => (/* binding */ bsc),\n/* harmony export */   bscTestnet: () => (/* binding */ bscTestnet),\n/* harmony export */   canto: () => (/* binding */ canto),\n/* harmony export */   celo: () => (/* binding */ celo),\n/* harmony export */   celoAlfajores: () => (/* binding */ celoAlfajores),\n/* harmony export */   celoCannoli: () => (/* binding */ celoCannoli),\n/* harmony export */   confluxESpace: () => (/* binding */ confluxESpace),\n/* harmony export */   cronos: () => (/* binding */ cronos),\n/* harmony export */   crossbell: () => (/* binding */ crossbell),\n/* harmony export */   dfk: () => (/* binding */ dfk),\n/* harmony export */   dogechain: () => (/* binding */ dogechain),\n/* harmony export */   evmos: () => (/* binding */ evmos),\n/* harmony export */   evmosTestnet: () => (/* binding */ evmosTestnet),\n/* harmony export */   fantom: () => (/* binding */ fantom),\n/* harmony export */   fantomTestnet: () => (/* binding */ fantomTestnet),\n/* harmony export */   filecoin: () => (/* binding */ filecoin),\n/* harmony export */   filecoinCalibration: () => (/* binding */ filecoinCalibration),\n/* harmony export */   filecoinHyperspace: () => (/* binding */ filecoinHyperspace),\n/* harmony export */   flare: () => (/* binding */ flare),\n/* harmony export */   flareTestnet: () => (/* binding */ flareTestnet),\n/* harmony export */   foundry: () => (/* binding */ foundry),\n/* harmony export */   fuse: () => (/* binding */ fuse),\n/* harmony export */   gnosis: () => (/* binding */ gnosis),\n/* harmony export */   gnosisChiado: () => (/* binding */ gnosisChiado),\n/* harmony export */   goerli: () => (/* binding */ goerli),\n/* harmony export */   haqqMainnet: () => (/* binding */ haqqMainnet),\n/* harmony export */   haqqTestedge2: () => (/* binding */ haqqTestedge2),\n/* harmony export */   hardhat: () => (/* binding */ hardhat),\n/* harmony export */   harmonyOne: () => (/* binding */ harmonyOne),\n/* harmony export */   iotex: () => (/* binding */ iotex),\n/* harmony export */   iotexTestnet: () => (/* binding */ iotexTestnet),\n/* harmony export */   klaytn: () => (/* binding */ klaytn),\n/* harmony export */   lineaTestnet: () => (/* binding */ lineaTestnet),\n/* harmony export */   localhost: () => (/* binding */ localhost),\n/* harmony export */   mainnet: () => (/* binding */ mainnet),\n/* harmony export */   metis: () => (/* binding */ metis),\n/* harmony export */   metisGoerli: () => (/* binding */ metisGoerli),\n/* harmony export */   moonbaseAlpha: () => (/* binding */ moonbaseAlpha),\n/* harmony export */   moonbeam: () => (/* binding */ moonbeam),\n/* harmony export */   moonriver: () => (/* binding */ moonriver),\n/* harmony export */   neonDevnet: () => (/* binding */ neonDevnet),\n/* harmony export */   nexi: () => (/* binding */ nexi),\n/* harmony export */   oasys: () => (/* binding */ oasys),\n/* harmony export */   okc: () => (/* binding */ okc),\n/* harmony export */   optimism: () => (/* binding */ optimism),\n/* harmony export */   optimismGoerli: () => (/* binding */ optimismGoerli),\n/* harmony export */   polygon: () => (/* binding */ polygon),\n/* harmony export */   polygonMumbai: () => (/* binding */ polygonMumbai),\n/* harmony export */   polygonZkEvm: () => (/* binding */ polygonZkEvm),\n/* harmony export */   polygonZkEvmTestnet: () => (/* binding */ polygonZkEvmTestnet),\n/* harmony export */   pulsechain: () => (/* binding */ pulsechain),\n/* harmony export */   pulsechainV4: () => (/* binding */ pulsechainV4),\n/* harmony export */   scrollTestnet: () => (/* binding */ scrollTestnet),\n/* harmony export */   sepolia: () => (/* binding */ sepolia),\n/* harmony export */   shardeumSphinx: () => (/* binding */ shardeumSphinx),\n/* harmony export */   skaleBlockBrawlers: () => (/* binding */ skaleBlockBrawlers),\n/* harmony export */   skaleCalypso: () => (/* binding */ skaleCalypso),\n/* harmony export */   skaleCalypsoTestnet: () => (/* binding */ skaleCalypsoTestnet),\n/* harmony export */   skaleChaosTestnet: () => (/* binding */ skaleChaosTestnet),\n/* harmony export */   skaleCryptoBlades: () => (/* binding */ skaleCryptoBlades),\n/* harmony export */   skaleCryptoColosseum: () => (/* binding */ skaleCryptoColosseum),\n/* harmony export */   skaleEuropa: () => (/* binding */ skaleEuropa),\n/* harmony export */   skaleEuropaTestnet: () => (/* binding */ skaleEuropaTestnet),\n/* harmony export */   skaleExorde: () => (/* binding */ skaleExorde),\n/* harmony export */   skaleHumanProtocol: () => (/* binding */ skaleHumanProtocol),\n/* harmony export */   skaleNebula: () => (/* binding */ skaleNebula),\n/* harmony export */   skaleNebulaTestnet: () => (/* binding */ skaleNebulaTestnet),\n/* harmony export */   skaleRazor: () => (/* binding */ skaleRazor),\n/* harmony export */   skaleTitan: () => (/* binding */ skaleTitan),\n/* harmony export */   skaleTitanTestnet: () => (/* binding */ skaleTitanTestnet),\n/* harmony export */   songbird: () => (/* binding */ songbird),\n/* harmony export */   songbirdTestnet: () => (/* binding */ songbirdTestnet),\n/* harmony export */   syscoin: () => (/* binding */ syscoin),\n/* harmony export */   taraxa: () => (/* binding */ taraxa),\n/* harmony export */   taraxaTestnet: () => (/* binding */ taraxaTestnet),\n/* harmony export */   telos: () => (/* binding */ telos),\n/* harmony export */   telosTestnet: () => (/* binding */ telosTestnet),\n/* harmony export */   thunderTestnet: () => (/* binding */ thunderTestnet),\n/* harmony export */   wanchain: () => (/* binding */ wanchain),\n/* harmony export */   wanchainTestnet: () => (/* binding */ wanchainTestnet),\n/* harmony export */   xdc: () => (/* binding */ xdc),\n/* harmony export */   xdcTestnet: () => (/* binding */ xdcTestnet),\n/* harmony export */   zhejiang: () => (/* binding */ zhejiang),\n/* harmony export */   zkSync: () => (/* binding */ zkSync),\n/* harmony export */   zkSyncTestnet: () => (/* binding */ zkSyncTestnet)\n/* harmony export */ });\n// src/arbitrum.ts\nvar arbitrum = {\n    id: 42161,\n    name: \"Arbitrum One\",\n    network: \"arbitrum\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://arb-mainnet.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://arb-mainnet.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://arbitrum-mainnet.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://arbitrum-mainnet.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://arb1.arbitrum.io/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://arb1.arbitrum.io/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Arbiscan\",\n            url: \"https://arbiscan.io\"\n        },\n        default: {\n            name: \"Arbiscan\",\n            url: \"https://arbiscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 7654707\n        }\n    }\n};\n// src/arbitrumGoerli.ts\nvar arbitrumGoerli = {\n    id: 421613,\n    name: \"Arbitrum Goerli\",\n    network: \"arbitrum-goerli\",\n    nativeCurrency: {\n        name: \"Arbitrum Goerli Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://arb-goerli.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://arb-goerli.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://arbitrum-goerli.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://arbitrum-goerli.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://goerli-rollup.arbitrum.io/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://goerli-rollup.arbitrum.io/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Arbiscan\",\n            url: \"https://goerli.arbiscan.io/\"\n        },\n        default: {\n            name: \"Arbiscan\",\n            url: \"https://goerli.arbiscan.io/\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 88114\n        }\n    },\n    testnet: true\n};\n// src/arbitrumNova.ts\nvar arbitrumNova = {\n    id: 42170,\n    name: \"Arbitrum Nova\",\n    network: \"arbitrum-nova\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        blast: {\n            http: [\n                \"https://arbitrum-nova.public.blastapi.io\"\n            ],\n            webSocket: [\n                \"wss://arbitrum-nova.public.blastapi.io\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://nova.arbitrum.io/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://nova.arbitrum.io/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Arbiscan\",\n            url: \"https://nova.arbiscan.io\"\n        },\n        blockScout: {\n            name: \"BlockScout\",\n            url: \"https://nova-explorer.arbitrum.io/\"\n        },\n        default: {\n            name: \"Arbiscan\",\n            url: \"https://nova.arbiscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 1746963\n        }\n    }\n};\n// src/aurora.ts\nvar aurora = {\n    id: 1313161554,\n    name: \"Aurora\",\n    network: \"aurora\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\"\n    },\n    rpcUrls: {\n        infura: {\n            http: [\n                \"https://aurora-mainnet.infura.io/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://mainnet.aurora.dev\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.aurora.dev\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Aurorascan\",\n            url: \"https://aurorascan.dev\"\n        },\n        default: {\n            name: \"Aurorascan\",\n            url: \"https://aurorascan.dev\"\n        }\n    }\n};\n// src/auroraTestnet.ts\nvar auroraTestnet = {\n    id: 1313161555,\n    name: \"Aurora Testnet\",\n    network: \"aurora-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\"\n    },\n    rpcUrls: {\n        infura: {\n            http: [\n                \"https://aurora-testnet.infura.io/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://testnet.aurora.dev\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://testnet.aurora.dev\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Aurorascan\",\n            url: \"https://testnet.aurorascan.dev\"\n        },\n        default: {\n            name: \"Aurorascan\",\n            url: \"https://testnet.aurorascan.dev\"\n        }\n    },\n    testnet: true\n};\n// src/avalanche.ts\nvar avalanche = {\n    id: 43114,\n    name: \"Avalanche\",\n    network: \"avalanche\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Avalanche\",\n        symbol: \"AVAX\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://api.avax.network/ext/bc/C/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://api.avax.network/ext/bc/C/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SnowTrace\",\n            url: \"https://snowtrace.io\"\n        },\n        default: {\n            name: \"SnowTrace\",\n            url: \"https://snowtrace.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 11907934\n        }\n    }\n};\n// src/avalancheFuji.ts\nvar avalancheFuji = {\n    id: 43113,\n    name: \"Avalanche Fuji\",\n    network: \"avalanche-fuji\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Avalanche Fuji\",\n        symbol: \"AVAX\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://api.avax-test.network/ext/bc/C/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://api.avax-test.network/ext/bc/C/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SnowTrace\",\n            url: \"https://testnet.snowtrace.io\"\n        },\n        default: {\n            name: \"SnowTrace\",\n            url: \"https://testnet.snowtrace.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 7096959\n        }\n    },\n    testnet: true\n};\n// src/baseGoerli.ts\nvar baseGoerli = {\n    id: 84531,\n    network: \"base-goerli\",\n    name: \"Base Goerli\",\n    nativeCurrency: {\n        name: \"Base Goerli\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://goerli.base.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://goerli.base.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Basescan\",\n            url: \"https://goerli.basescan.org\"\n        },\n        default: {\n            name: \"Basescan\",\n            url: \"https://goerli.basescan.org\"\n        }\n    },\n    testnet: true\n};\n// src/boba.ts\nvar boba = {\n    id: 288,\n    name: \"Boba Network\",\n    network: \"boba\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Boba\",\n        symbol: \"BOBA\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.boba.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.boba.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"BOBAScan\",\n            url: \"https://bobascan.com\"\n        },\n        default: {\n            name: \"BOBAScan\",\n            url: \"https://bobascan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 446859\n        }\n    }\n};\n// src/bronos.ts\nvar bronos = {\n    id: 1039,\n    name: \"Bronos\",\n    network: \"bronos\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"BRO\",\n        symbol: \"BRO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://evm.bronos.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://evm.bronos.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"BronoScan\",\n            url: \"https://broscan.bronos.org\"\n        }\n    }\n};\n// src/bronosTestnet.ts\nvar bronosTestnet = {\n    id: 1038,\n    name: \"Bronos Testnet\",\n    network: \"bronos-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Bronos Coin\",\n        symbol: \"tBRO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://evm-testnet.bronos.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://evm-testnet.bronos.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"BronoScan\",\n            url: \"https://tbroscan.bronos.org\"\n        }\n    },\n    testnet: true\n};\n// src/bsc.ts\nvar bsc = {\n    id: 56,\n    name: \"BNB Smart Chain\",\n    network: \"bsc\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"BNB\",\n        symbol: \"BNB\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.ankr.com/bsc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.ankr.com/bsc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"BscScan\",\n            url: \"https://bscscan.com\"\n        },\n        default: {\n            name: \"BscScan\",\n            url: \"https://bscscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 15921452\n        }\n    }\n};\n// src/bscTestnet.ts\nvar bscTestnet = {\n    id: 97,\n    name: \"Binance Smart Chain Testnet\",\n    network: \"bsc-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"BNB\",\n        symbol: \"tBNB\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://data-seed-prebsc-1-s1.binance.org:8545\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://data-seed-prebsc-1-s1.binance.org:8545\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"BscScan\",\n            url: \"https://testnet.bscscan.com\"\n        },\n        default: {\n            name: \"BscScan\",\n            url: \"https://testnet.bscscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 17422483\n        }\n    },\n    testnet: true\n};\n// src/canto.ts\nvar canto = {\n    id: 7700,\n    name: \"Canto\",\n    network: \"canto\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Canto\",\n        symbol: \"CANTO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://canto.slingshot.finance\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://canto.slingshot.finance\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Canto EVM Explorer (Blockscout)\",\n            url: \"https://evm.explorer.canto.io\"\n        }\n    }\n};\n// src/celo.ts\nvar celo = {\n    id: 42220,\n    name: \"Celo\",\n    network: \"celo\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"CELO\",\n        symbol: \"CELO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://forno.celo.org\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://celo-mainnet.infura.io/v3\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://forno.celo.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Celo Explorer\",\n            url: \"https://explorer.celo.org/mainnet\"\n        },\n        etherscan: {\n            name: \"CeloScan\",\n            url: \"https://celoscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 13112599\n        }\n    },\n    testnet: false\n};\n// src/celoAlfajores.ts\nvar celoAlfajores = {\n    id: 44787,\n    name: \"Alfajores\",\n    network: \"celo-alfajores\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"CELO\",\n        symbol: \"A-CELO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://alfajores-forno.celo-testnet.org\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://celo-alfajores.infura.io/v3\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://alfajores-forno.celo-testnet.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Celo Explorer\",\n            url: \"https://explorer.celo.org/alfajores\"\n        },\n        etherscan: {\n            name: \"CeloScan\",\n            url: \"https://alfajores.celoscan.io/\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 14569001\n        }\n    },\n    testnet: true\n};\n// src/celoCannoli.ts\nvar celoCannoli = {\n    id: 17323,\n    name: \"Cannoli\",\n    network: \"celo-cannoli\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"CELO\",\n        symbol: \"C-CELO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://forno.cannoli.celo-testnet.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://forno.cannoli.celo-testnet.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Celo Explorer\",\n            url: \"https://explorer.celo.org/cannoli\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0x5Acb0aa8BF4E8Ff0d882Ee187140713C12BF9718\",\n            blockCreated: 87429\n        }\n    },\n    testnet: true\n};\n// src/confluxESpace.ts\nvar confluxESpace = {\n    id: 1030,\n    name: \"Conflux eSpace\",\n    network: \"cfx-espace\",\n    nativeCurrency: {\n        name: \"Conflux\",\n        symbol: \"CFX\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://evm.confluxrpc.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://evm.confluxrpc.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"ConfluxScan\",\n            url: \"https://evm.confluxscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xEFf0078910f638cd81996cc117bccD3eDf2B072F\",\n            blockCreated: 68602935\n        }\n    }\n};\n// src/cronos.ts\nvar cronos = {\n    id: 25,\n    name: \"Cronos\",\n    network: \"cronos\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Cronos\",\n        symbol: \"CRO\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://node.croswap.com/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://node.croswap.com/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"CronosScan\",\n            url: \"https://cronoscan.com\"\n        },\n        default: {\n            name: \"CronosScan\",\n            url: \"https://cronoscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 1963112\n        }\n    }\n};\n// src/crossbell.ts\nvar crossbell = {\n    id: 3737,\n    network: \"crossbell\",\n    name: \"Crossbell\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"CSB\",\n        symbol: \"CSB\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.crossbell.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.crossbell.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"CrossScan\",\n            url: \"https://scan.crossbell.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xBB9759009cDaC82774EfC84D94cD9F7440f75Fcf\",\n            blockCreated: 23499787\n        }\n    }\n};\n// src/dfk.ts\nvar dfk = {\n    id: 53935,\n    name: \"DFK Chain\",\n    network: \"dfk\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Jewel\",\n        symbol: \"JEWEL\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"DFKSubnetScan\",\n            url: \"https://subnets.avax.network/defi-kingdoms\"\n        },\n        default: {\n            name: \"DFKSubnetScan\",\n            url: \"https://subnets.avax.network/defi-kingdoms\"\n        }\n    }\n};\n// src/dogechain.ts\nvar dogechain = {\n    id: 2e3,\n    name: \"Dogechain\",\n    network: \"dogechain\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Dogechain\",\n        symbol: \"DC\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.dogechain.dog\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.dogechain.dog\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"DogeChainExplorer\",\n            url: \"https://explorer.dogechain.dog\"\n        },\n        default: {\n            name: \"DogeChainExplorer\",\n            url: \"https://explorer.dogechain.dog\"\n        }\n    }\n};\n// src/evmos.ts\nvar evmos = {\n    id: 9001,\n    name: \"Evmos\",\n    network: \"evmos\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Evmos\",\n        symbol: \"EVMOS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://eth.bd.evmos.org:8545\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://eth.bd.evmos.org:8545\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Evmos Block Explorer\",\n            url: \"https://escan.live/\"\n        }\n    }\n};\n// src/evmosTestnet.ts\nvar evmosTestnet = {\n    id: 9e3,\n    name: \"Evmos Testnet\",\n    network: \"evmos-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Evmos\",\n        symbol: \"EVMOS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://eth.bd.evmos.dev:8545\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://eth.bd.evmos.dev:8545\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Evmos Testnet Block Explorer\",\n            url: \"https://evm.evmos.dev/\"\n        }\n    }\n};\n// src/fantom.ts\nvar fantom = {\n    id: 250,\n    name: \"Fantom\",\n    network: \"fantom\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Fantom\",\n        symbol: \"FTM\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.ankr.com/fantom\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.ankr.com/fantom\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"FTMScan\",\n            url: \"https://ftmscan.com\"\n        },\n        default: {\n            name: \"FTMScan\",\n            url: \"https://ftmscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 33001987\n        }\n    }\n};\n// src/fantomTestnet.ts\nvar fantomTestnet = {\n    id: 4002,\n    name: \"Fantom Testnet\",\n    network: \"fantom-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Fantom\",\n        symbol: \"FTM\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.testnet.fantom.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.testnet.fantom.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"FTMScan\",\n            url: \"https://testnet.ftmscan.com\"\n        },\n        default: {\n            name: \"FTMScan\",\n            url: \"https://testnet.ftmscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 8328688\n        }\n    }\n};\n// src/filecoin.ts\nvar filecoin = {\n    id: 314,\n    name: \"Filecoin Mainnet\",\n    network: \"filecoin-mainnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"filecoin\",\n        symbol: \"FIL\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://api.node.glif.io/rpc/v1\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://api.node.glif.io/rpc/v1\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Filfox\",\n            url: \"https://filfox.info/en\"\n        },\n        filscan: {\n            name: \"Filscan\",\n            url: \"https://filscan.io\"\n        },\n        filscout: {\n            name: \"Filscout\",\n            url: \"https://filscout.io/en\"\n        },\n        glif: {\n            name: \"Glif\",\n            url: \"https://explorer.glif.io\"\n        }\n    }\n};\n// src/filecoinCalibration.ts\nvar filecoinCalibration = {\n    id: 314159,\n    name: \"Filecoin Calibration\",\n    network: \"filecoin-calibration\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"testnet filecoin\",\n        symbol: \"tFIL\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://api.calibration.node.glif.io/rpc/v1\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://api.calibration.node.glif.io/rpc/v1\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Filscan\",\n            url: \"https://calibration.filscan.io\"\n        }\n    }\n};\n// src/filecoinHyperspace.ts\nvar filecoinHyperspace = {\n    id: 3141,\n    name: \"Filecoin Hyperspace\",\n    network: \"filecoin-hyperspace\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"testnet filecoin\",\n        symbol: \"tFIL\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://api.hyperspace.node.glif.io/rpc/v1\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://api.hyperspace.node.glif.io/rpc/v1\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Filfox\",\n            url: \"https://hyperspace.filfox.info/en\"\n        },\n        filscan: {\n            name: \"Filscan\",\n            url: \"https://hyperspace.filscan.io\"\n        }\n    }\n};\n// src/flare.ts\nvar flare = {\n    id: 14,\n    name: \"Flare Mainnet\",\n    network: \"flare-mainnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"flare\",\n        symbol: \"FLR\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://flare-api.flare.network/ext/C/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://flare-api.flare.network/ext/C/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Flare Explorer\",\n            url: \"https://flare-explorer.flare.network\"\n        }\n    }\n};\n// src/flareTestnet.ts\nvar flareTestnet = {\n    id: 114,\n    name: \"Coston2\",\n    network: \"coston2\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"coston2flare\",\n        symbol: \"C2FLR\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://coston2-api.flare.network/ext/C/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://coston2-api.flare.network/ext/C/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Coston2 Explorer\",\n            url: \"https://coston2-explorer.flare.network\"\n        }\n    },\n    testnet: true\n};\n// src/foundry.ts\nvar foundry = {\n    id: 31337,\n    name: \"Foundry\",\n    network: \"foundry\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"http://127.0.0.1:8545\"\n            ],\n            webSocket: [\n                \"ws://127.0.0.1:8545\"\n            ]\n        },\n        public: {\n            http: [\n                \"http://127.0.0.1:8545\"\n            ],\n            webSocket: [\n                \"ws://127.0.0.1:8545\"\n            ]\n        }\n    }\n};\n// src/fuse.ts\nvar fuse = {\n    id: 122,\n    name: \"Fuse\",\n    network: \"fuse\",\n    nativeCurrency: {\n        name: \"Fuse\",\n        symbol: \"FUSE\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.fuse.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://fuse-mainnet.chainstacklabs.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Fuse Explorer\",\n            url: \"https://explorer.fuse.io\"\n        }\n    }\n};\n// src/iotex.ts\nvar iotex = {\n    id: 4689,\n    name: \"IoTeX\",\n    network: \"iotex\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"IoTeX\",\n        symbol: \"IOTX\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://babel-api.mainnet.iotex.io\"\n            ],\n            webSocket: [\n                \"wss://babel-api.mainnet.iotex.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://babel-api.mainnet.iotex.io\"\n            ],\n            webSocket: [\n                \"wss://babel-api.mainnet.iotex.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"IoTeXScan\",\n            url: \"https://iotexscan.io\"\n        }\n    }\n};\n// src/iotexTestnet.ts\nvar iotexTestnet = {\n    id: 4690,\n    name: \"IoTeX Testnet\",\n    network: \"iotex-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"IoTeX\",\n        symbol: \"IOTX\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://babel-api.testnet.iotex.io\"\n            ],\n            webSocket: [\n                \"wss://babel-api.testnet.iotex.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://babel-api.testnet.iotex.io\"\n            ],\n            webSocket: [\n                \"wss://babel-api.testnet.iotex.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"IoTeXScan\",\n            url: \"https://testnet.iotexscan.io\"\n        }\n    }\n};\n// src/goerli.ts\nvar goerli = {\n    id: 5,\n    network: \"goerli\",\n    name: \"Goerli\",\n    nativeCurrency: {\n        name: \"Goerli Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://eth-goerli.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://eth-goerli.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://goerli.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://goerli.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://rpc.ankr.com/eth_goerli\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.ankr.com/eth_goerli\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Etherscan\",\n            url: \"https://goerli.etherscan.io\"\n        },\n        default: {\n            name: \"Etherscan\",\n            url: \"https://goerli.etherscan.io\"\n        }\n    },\n    contracts: {\n        ensRegistry: {\n            address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n        },\n        ensUniversalResolver: {\n            address: \"0xA292E2E58d4ddEb29C33c63173d0E8B7a2A4c62e\",\n            blockCreated: 8610406\n        },\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 6507670\n        }\n    },\n    testnet: true\n};\n// src/gnosis.ts\nvar gnosis = {\n    id: 100,\n    name: \"Gnosis\",\n    network: \"gnosis\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Gnosis\",\n        symbol: \"xDAI\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.gnosischain.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.gnosischain.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Gnosisscan\",\n            url: \"https://gnosisscan.io/\"\n        },\n        default: {\n            name: \"Gnosis Chain Explorer\",\n            url: \"https://blockscout.com/xdai/mainnet/\"\n        }\n    }\n};\n// src/gnosisChiado.ts\nvar gnosisChiado = {\n    id: 10200,\n    name: \"Gnosis Chiado\",\n    network: \"chiado\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Gnosis\",\n        symbol: \"xDAI\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.chiadochain.net\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.chiadochain.net\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Blockscout\",\n            url: \"https://blockscout.chiadochain.net\"\n        }\n    }\n};\n// src/hardhat.ts\nvar hardhat = {\n    id: 31337,\n    name: \"Hardhat\",\n    network: \"hardhat\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"http://127.0.0.1:8545\"\n            ]\n        },\n        public: {\n            http: [\n                \"http://127.0.0.1:8545\"\n            ]\n        }\n    }\n};\n// src/harmonyOne.ts\nvar harmonyOne = {\n    id: 16666e5,\n    name: \"Harmony One\",\n    network: \"harmony\",\n    nativeCurrency: {\n        name: \"Harmony\",\n        symbol: \"ONE\",\n        decimals: 18\n    },\n    rpcUrls: {\n        public: {\n            http: [\n                \"https://rpc.ankr.com/harmony\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://rpc.ankr.com/harmony\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Harmony Explorer\",\n            url: \"https://explorer.harmony.one\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 24185753\n        }\n    }\n};\n// src/haqqMainnet.ts\nvar haqqMainnet = {\n    id: 11235,\n    name: \"HAQQ Mainnet\",\n    network: \"haqq-mainnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Islamic Coin\",\n        symbol: \"ISLM\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.eth.haqq.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.eth.haqq.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"HAQQ Explorer\",\n            url: \"https://explorer.haqq.network\"\n        }\n    }\n};\n// src/haqqTestedge2.ts\nvar haqqTestedge2 = {\n    id: 54211,\n    name: \"HAQQ Testedge 2\",\n    network: \"haqq-testedge-2\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Islamic Coin\",\n        symbol: \"ISLMT\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.eth.testedge2.haqq.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.eth.testedge2.haqq.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"HAQQ Explorer\",\n            url: \"https://explorer.testedge2.haqq.network\"\n        }\n    }\n};\n// src/klaytn.ts\nvar klaytn = {\n    id: 8217,\n    name: \"Klaytn\",\n    network: \"klaytn\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Klaytn\",\n        symbol: \"KLAY\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://cypress.fautor.app/archive\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://cypress.fautor.app/archive\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"KlaytnScope\",\n            url: \"https://scope.klaytn.com\"\n        },\n        default: {\n            name: \"KlaytnScope\",\n            url: \"https://scope.klaytn.com\"\n        }\n    }\n};\n// src/lineaTestnet.ts\nvar lineaTestnet = {\n    id: 59140,\n    name: \"Linea Goerli Testnet\",\n    network: \"linea-testnet\",\n    nativeCurrency: {\n        name: \"Linea Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        infura: {\n            http: [\n                \"https://consensys-zkevm-goerli-prealpha.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://consensys-zkevm-goerli-prealpha.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://rpc.goerli.linea.build\"\n            ],\n            webSocket: [\n                \"wss://rpc.goerli.linea.build\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.goerli.linea.build\"\n            ],\n            webSocket: [\n                \"wss://rpc.goerli.linea.build\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"BlockScout\",\n            url: \"https://explorer.goerli.linea.build\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 498623\n        }\n    },\n    testnet: true\n};\n// src/localhost.ts\nvar localhost = {\n    id: 1337,\n    name: \"Localhost\",\n    network: \"localhost\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"http://127.0.0.1:8545\"\n            ]\n        },\n        public: {\n            http: [\n                \"http://127.0.0.1:8545\"\n            ]\n        }\n    }\n};\n// src/mainnet.ts\nvar mainnet = {\n    id: 1,\n    network: \"homestead\",\n    name: \"Ethereum\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://eth-mainnet.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://eth-mainnet.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://mainnet.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://mainnet.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://cloudflare-eth.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://cloudflare-eth.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Etherscan\",\n            url: \"https://etherscan.io\"\n        },\n        default: {\n            name: \"Etherscan\",\n            url: \"https://etherscan.io\"\n        }\n    },\n    contracts: {\n        ensRegistry: {\n            address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n        },\n        ensUniversalResolver: {\n            address: \"0xE4Acdd618deED4e6d2f03b9bf62dc6118FC9A4da\",\n            blockCreated: 16773775\n        },\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 14353601\n        }\n    }\n};\n// src/metis.ts\nvar metis = {\n    id: 1088,\n    name: \"Metis\",\n    network: \"andromeda\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Metis\",\n        symbol: \"METIS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://andromeda.metis.io/?owner=1088\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://andromeda.metis.io/?owner=1088\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Andromeda Explorer\",\n            url: \"https://andromeda-explorer.metis.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 2338552\n        }\n    }\n};\n// src/metisGoerli.ts\nvar metisGoerli = {\n    id: 599,\n    name: \"Metis Goerli\",\n    network: \"metis-goerli\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Metis Goerli\",\n        symbol: \"METIS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://goerli.gateway.metisdevops.link\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://goerli.gateway.metisdevops.link\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Metis Goerli Explorer\",\n            url: \"https://goerli.explorer.metisdevops.link\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 1006207\n        }\n    }\n};\n// src/moonbaseAlpha.ts\nvar moonbaseAlpha = {\n    id: 1287,\n    name: \"Moonbase Alpha\",\n    network: \"moonbase-alpha\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"DEV\",\n        symbol: \"DEV\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.api.moonbase.moonbeam.network\"\n            ],\n            webSocket: [\n                \"wss://wss.api.moonbase.moonbeam.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.api.moonbase.moonbeam.network\"\n            ],\n            webSocket: [\n                \"wss://wss.api.moonbase.moonbeam.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Moonscan\",\n            url: \"https://moonbase.moonscan.io\"\n        },\n        etherscan: {\n            name: \"Moonscan\",\n            url: \"https://moonbase.moonscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 1850686\n        }\n    },\n    testnet: true\n};\n// src/moonbeam.ts\nvar moonbeam = {\n    id: 1284,\n    name: \"Moonbeam\",\n    network: \"moonbeam\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"GLMR\",\n        symbol: \"GLMR\"\n    },\n    rpcUrls: {\n        public: {\n            http: [\n                \"https://moonbeam.public.blastapi.io\"\n            ],\n            webSocket: [\n                \"wss://moonbeam.public.blastapi.io\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://moonbeam.public.blastapi.io\"\n            ],\n            webSocket: [\n                \"wss://moonbeam.public.blastapi.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Moonscan\",\n            url: \"https://moonscan.io\"\n        },\n        etherscan: {\n            name: \"Moonscan\",\n            url: \"https://moonscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 609002\n        }\n    },\n    testnet: false\n};\n// src/moonriver.ts\nvar moonriver = {\n    id: 1285,\n    name: \"Moonriver\",\n    network: \"moonriver\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"MOVR\",\n        symbol: \"MOVR\"\n    },\n    rpcUrls: {\n        public: {\n            http: [\n                \"https://moonriver.public.blastapi.io\"\n            ],\n            webSocket: [\n                \"wss://moonriver.public.blastapi.io\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://moonriver.public.blastapi.io\"\n            ],\n            webSocket: [\n                \"wss://moonriver.public.blastapi.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Moonscan\",\n            url: \"https://moonriver.moonscan.io\"\n        },\n        etherscan: {\n            name: \"Moonscan\",\n            url: \"https://moonriver.moonscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 1597904\n        }\n    },\n    testnet: false\n};\n// src/neonDevnet.ts\nvar neonDevnet = {\n    id: 245022926,\n    network: \"neonDevnet\",\n    name: \"Neon EVM DevNet\",\n    nativeCurrency: {\n        name: \"NEON\",\n        symbol: \"NEON\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://devnet.neonevm.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://devnet.neonevm.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Neonscan\",\n            url: \"https://neonscan.org\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 205206112\n        }\n    },\n    testnet: true\n};\n// src/nexi.ts\nvar nexi = {\n    id: 4242,\n    name: \"Nexi\",\n    network: \"nexi\",\n    nativeCurrency: {\n        name: \"Nexi\",\n        symbol: \"NEXI\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.chain.nexi.technology\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.chain.nexi.technology\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"NexiScan\",\n            url: \"https://www.nexiscan.com\"\n        },\n        default: {\n            name: \"NexiScan\",\n            url: \"https://www.nexiscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0x0277A46Cc69A57eE3A6C8c158bA874832F718B8E\",\n            blockCreated: 25770160\n        }\n    }\n};\n// src/oasys.ts\nvar oasys = {\n    id: 248,\n    name: \"Oasys\",\n    network: \"oasys\",\n    nativeCurrency: {\n        name: \"Oasys\",\n        symbol: \"OAS\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.mainnet.oasys.games\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.mainnet.oasys.games\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"OasysScan\",\n            url: \"https://scan.oasys.games\"\n        }\n    }\n};\n// src/okc.ts\nvar okc = {\n    id: 66,\n    name: \"OKC\",\n    network: \"okc\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"OKT\",\n        symbol: \"OKT\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://exchainrpc.okex.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://exchainrpc.okex.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"oklink\",\n            url: \"https://www.oklink.com/okc\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 10364792\n        }\n    }\n};\n// src/optimism.ts\nvar optimism = {\n    id: 10,\n    name: \"Optimism\",\n    network: \"optimism\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://opt-mainnet.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://opt-mainnet.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://optimism-mainnet.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://optimism-mainnet.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://mainnet.optimism.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.optimism.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Etherscan\",\n            url: \"https://optimistic.etherscan.io\"\n        },\n        default: {\n            name: \"Optimism Explorer\",\n            url: \"https://explorer.optimism.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 4286263\n        }\n    }\n};\n// src/optimismGoerli.ts\nvar optimismGoerli = {\n    id: 420,\n    name: \"Optimism Goerli\",\n    network: \"optimism-goerli\",\n    nativeCurrency: {\n        name: \"Goerli Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://opt-goerli.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://opt-goerli.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://optimism-goerli.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://optimism-goerli.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://goerli.optimism.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://goerli.optimism.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Etherscan\",\n            url: \"https://goerli-optimism.etherscan.io\"\n        },\n        default: {\n            name: \"Etherscan\",\n            url: \"https://goerli-optimism.etherscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 49461\n        }\n    },\n    testnet: true\n};\n// src/polygon.ts\nvar polygon = {\n    id: 137,\n    name: \"Polygon\",\n    network: \"matic\",\n    nativeCurrency: {\n        name: \"MATIC\",\n        symbol: \"MATIC\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://polygon-mainnet.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://polygon-mainnet.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://polygon-mainnet.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://polygon-mainnet.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://polygon-rpc.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://polygon-rpc.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"PolygonScan\",\n            url: \"https://polygonscan.com\"\n        },\n        default: {\n            name: \"PolygonScan\",\n            url: \"https://polygonscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 25770160\n        }\n    }\n};\n// src/polygonMumbai.ts\nvar polygonMumbai = {\n    id: 80001,\n    name: \"Polygon Mumbai\",\n    network: \"maticmum\",\n    nativeCurrency: {\n        name: \"MATIC\",\n        symbol: \"MATIC\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://polygon-mumbai.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://polygon-mumbai.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://polygon-mumbai.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://polygon-mumbai.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://matic-mumbai.chainstacklabs.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://matic-mumbai.chainstacklabs.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"PolygonScan\",\n            url: \"https://mumbai.polygonscan.com\"\n        },\n        default: {\n            name: \"PolygonScan\",\n            url: \"https://mumbai.polygonscan.com\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 25770160\n        }\n    },\n    testnet: true\n};\n// src/polygonZkEvmTestnet.ts\nvar polygonZkEvmTestnet = {\n    id: 1442,\n    name: \"Polygon zkEVM Testnet\",\n    network: \"polygon-zkevm-testnet\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.public.zkevm-test.net\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.public.zkevm-test.net\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Blockscout\",\n            url: \"https://explorer.public.zkevm-test.net\"\n        }\n    },\n    testnet: true\n};\n// src/polygonZkEvm.ts\nvar polygonZkEvm = {\n    id: 1101,\n    name: \"Polygon zkEVM\",\n    network: \"polygon-zkevm\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://zkevm-rpc.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://zkevm-rpc.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"PolygonScan\",\n            url: \"https://zkevm.polygonscan.com\"\n        }\n    }\n};\n// src/pulsechain.ts\nvar pulsechain = {\n    id: 369,\n    network: \"pulsechain\",\n    name: \"Pulsechain\",\n    nativeCurrency: {\n        name: \"Pulse\",\n        symbol: \"PLS\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.mainnet.pulsechain.com\"\n            ],\n            webSocket: [\n                \"wss://ws.mainnet.pulsechain.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.mainnet.pulsechain.com\"\n            ],\n            webSocket: [\n                \"wss://ws.mainnet.pulsechain.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Etherscan\",\n            url: \"https://scan.pulsechain.com\"\n        }\n    },\n    contracts: {\n        ensRegistry: {\n            address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n        },\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 14353601\n        }\n    }\n};\n// src/pulsechainV4.ts\nvar pulsechainV4 = {\n    id: 943,\n    network: \"pulsechainV4\",\n    name: \"Pulsechain V4\",\n    testnet: true,\n    nativeCurrency: {\n        name: \"Pulse\",\n        symbol: \"PLS\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.v4.testnet.pulsechain.com\"\n            ],\n            webSocket: [\n                \"wss://ws.v4.testnet.pulsechain.com\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.v4.testnet.pulsechain.com\"\n            ],\n            webSocket: [\n                \"wss://ws.v4.testnet.pulsechain.com\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Blockscout\",\n            url: \"https://scan.v4.testnet.pulsechain.com\"\n        }\n    },\n    contracts: {\n        ensRegistry: {\n            address: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\"\n        },\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 14353601\n        }\n    }\n};\n// src/scrollTestnet.ts\nvar scrollTestnet = {\n    id: 534353,\n    name: \"Scroll Testnet\",\n    network: \"scroll-testnet\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://alpha-rpc.scroll.io/l2\"\n            ],\n            webSocket: [\n                \"wss://alpha-rpc.scroll.io/l2/ws\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://alpha-rpc.scroll.io/l2\"\n            ],\n            webSocket: [\n                \"wss://alpha-rpc.scroll.io/l2/ws\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Blockscout\",\n            url: \"https://blockscout.scroll.io\"\n        }\n    },\n    testnet: true\n};\n// src/sepolia.ts\nvar sepolia = {\n    id: 11155111,\n    network: \"sepolia\",\n    name: \"Sepolia\",\n    nativeCurrency: {\n        name: \"Sepolia Ether\",\n        symbol: \"SEP\",\n        decimals: 18\n    },\n    rpcUrls: {\n        alchemy: {\n            http: [\n                \"https://eth-sepolia.g.alchemy.com/v2\"\n            ],\n            webSocket: [\n                \"wss://eth-sepolia.g.alchemy.com/v2\"\n            ]\n        },\n        infura: {\n            http: [\n                \"https://sepolia.infura.io/v3\"\n            ],\n            webSocket: [\n                \"wss://sepolia.infura.io/ws/v3\"\n            ]\n        },\n        default: {\n            http: [\n                \"https://rpc.sepolia.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.sepolia.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"Etherscan\",\n            url: \"https://sepolia.etherscan.io\"\n        },\n        default: {\n            name: \"Etherscan\",\n            url: \"https://sepolia.etherscan.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xca11bde05977b3631167028862be2a173976ca11\",\n            blockCreated: 6507670\n        }\n    },\n    testnet: true\n};\n// src/skale/brawl.ts\nvar skaleBlockBrawlers = {\n    id: 391845894,\n    name: \"SKALE | Block Brawlers\",\n    network: \"skale-brawl\",\n    nativeCurrency: {\n        name: \"BRAWL\",\n        symbol: \"BRAWL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/frayed-decent-antares\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/frayed-decent-antares\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://frayed-decent-antares.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://frayed-decent-antares.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/calypso.ts\nvar skaleCalypso = {\n    id: 1564830818,\n    name: \"SKALE | Calypso NFT Hub\",\n    network: \"skale-calypso\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/honorable-steel-rasalhague\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://honorable-steel-rasalhague.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/calypsoTestnet.ts\nvar skaleCalypsoTestnet = {\n    id: 344106930,\n    name: \"SKALE | Calypso NFT Hub Testnet\",\n    network: \"skale-calypso-testnet\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-utter-unripe-menkar\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-utter-unripe-menkar\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-utter-unripe-menkar.explorer.staging-v3.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-utter-unripe-menkar.explorer.staging-v3.skalenodes.com\"\n        }\n    },\n    contracts: {},\n    testnet: true\n};\n// src/skale/chaosTestnet.ts\nvar skaleChaosTestnet = {\n    id: 1351057110,\n    name: \"SKALE | Chaos Testnet\",\n    network: \"skale-chaos-testnet\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-fast-active-bellatrix\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-fast-active-bellatrix\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-fast-active-bellatrix.explorer.staging-v3.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-fast-active-bellatrix.explorer.staging-v3.skalenodes.com\"\n        }\n    },\n    contracts: {},\n    testnet: true\n};\n// src/skale/cryptoBlades.ts\nvar skaleCryptoBlades = {\n    id: 1026062157,\n    name: \"SKALE | CryptoBlades\",\n    network: \"skale-cryptoblades\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/affectionate-immediate-pollux\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://affectionate-immediate-pollux.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/cryptoColosseum.ts\nvar skaleCryptoColosseum = {\n    id: 2046399126,\n    name: \"SKALE | Crypto Colosseum\",\n    network: \"skale-crypto-coloseeum\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/haunting-devoted-deneb\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/haunting-devoted-deneb\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://haunting-devoted-deneb.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/europa.ts\nvar skaleEuropa = {\n    id: 2046399126,\n    name: \"SKALE | Europa Liquidity Hub\",\n    network: \"skale-europa\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/elated-tan-skat\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/elated-tan-skat\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://elated-tan-skat.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://elated-tan-skat.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/europaTestnet.ts\nvar skaleEuropaTestnet = {\n    id: 476158412,\n    name: \"SKALE | Europa Liquidity Hub Testnet\",\n    network: \"skale-europa-testnet\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-legal-crazy-castor\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-legal-crazy-castor\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-legal-crazy-castor.explorer.staging-v3.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-legal-crazy-castor.explorer.staging-v3.skalenodes.com\"\n        }\n    },\n    contracts: {},\n    testnet: true\n};\n// src/skale/exorde.ts\nvar skaleExorde = {\n    id: 2139927552,\n    name: \"SKALE | Exorde\",\n    network: \"skale-exorde\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/light-vast-diphda\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/light-vast-diphda\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://light-vast-diphda.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://light-vast-diphda.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/humanProtocol.ts\nvar skaleHumanProtocol = {\n    id: 1273227453,\n    name: \"SKALE | Human Protocol\",\n    network: \"skale-human-protocol\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/wan-red-ain\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/wan-red-ain\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://wan-red-ain.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://wan-red-ain.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/nebula.ts\nvar skaleNebula = {\n    id: 1482601649,\n    name: \"SKALE | Nebula Gaming Hub\",\n    network: \"skale-nebula\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/green-giddy-denebola\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/green-giddy-denebola\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://green-giddy-denebola.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://green-giddy-denebola.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/nebulaTestnet.ts\nvar skaleNebulaTestnet = {\n    id: 503129905,\n    name: \"SKALE | Nebula Gaming Hub Testnet\",\n    network: \"skale-nebula-testnet\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-faint-slimy-achird\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-faint-slimy-achird\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-faint-slimy-achird.explorer.staging-v3.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-faint-slimy-achird.explorer.staging-v3.skalenodes.com\"\n        }\n    },\n    contracts: {},\n    testnet: true\n};\n// src/skale/razor.ts\nvar skaleRazor = {\n    id: 278611351,\n    name: \"SKALE | Razor Network\",\n    network: \"skale-razor\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/turbulent-unique-scheat\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/turbulent-unique-scheat\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://turbulent-unique-scheat.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/titan.ts\nvar skaleTitan = {\n    id: 1350216234,\n    name: \"SKALE | Titan Community Hub\",\n    network: \"skale-titan\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/parallel-stormy-spica\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.skalenodes.com/v1/parallel-stormy-spica\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://parallel-stormy-spica.explorer.mainnet.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://parallel-stormy-spica.explorer.mainnet.skalenodes.com\"\n        }\n    },\n    contracts: {}\n};\n// src/skale/titanTestnet.ts\nvar skaleTitanTestnet = {\n    id: 1517929550,\n    name: \"SKALE | Titan Community Hub Testnet\",\n    network: \"skale-titan-testnet\",\n    nativeCurrency: {\n        name: \"sFUEL\",\n        symbol: \"sFUEL\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-aware-chief-gianfar\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://staging-v3.skalenodes.com/v1/staging-aware-chief-gianfar\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-aware-chief-gianfar.explorer.staging-v3.skalenodes.com\"\n        },\n        default: {\n            name: \"SKALE Explorer\",\n            url: \"https://staging-aware-chief-gianfar.explorer.staging-v3.skalenodes.com\"\n        }\n    },\n    contracts: {},\n    testnet: true\n};\n// src/songbird.ts\nvar songbird = {\n    id: 19,\n    name: \"Songbird Mainnet\",\n    network: \"songbird-mainnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"songbird\",\n        symbol: \"SGB\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://songbird-api.flare.network/ext/C/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://songbird-api.flare.network/ext/C/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Songbird Explorer\",\n            url: \"https://songbird-explorer.flare.network\"\n        }\n    }\n};\n// src/songbirdTestnet.ts\nvar songbirdTestnet = {\n    id: 16,\n    name: \"Coston\",\n    network: \"coston\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"costonflare\",\n        symbol: \"CFLR\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://coston-api.flare.network/ext/C/rpc\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://coston-api.flare.network/ext/C/rpc\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Coston Explorer\",\n            url: \"https://coston-explorer.flare.network\"\n        }\n    },\n    testnet: true\n};\n// src/shardeumSphinx.ts\nvar shardeumSphinx = {\n    id: 8082,\n    name: \"Shardeum Sphinx\",\n    network: \"shmSphinx\",\n    nativeCurrency: {\n        name: \"SHARDEUM\",\n        symbol: \"SHM\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://sphinx.shardeum.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://sphinx.shardeum.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Shardeum Explorer\",\n            url: \"https://explorer-sphinx.shardeum.org\"\n        }\n    },\n    testnet: true\n};\n// src/syscoin.ts\nvar syscoin = {\n    id: 57,\n    name: \"Syscoin Mainnet\",\n    network: \"syscoin\",\n    nativeCurrency: {\n        decimals: 8,\n        name: \"Syscoin\",\n        symbol: \"SYS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.syscoin.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.syscoin.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"SyscoinExplorer\",\n            url: \"https://explorer.syscoin.org\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0x000562033783B1136159E10d976B519C929cdE8e\",\n            blockCreated: 80637\n        }\n    }\n};\n// src/taraxa.ts\nvar taraxa = {\n    id: 841,\n    name: \"Taraxa Mainnet\",\n    network: \"taraxa\",\n    nativeCurrency: {\n        name: \"Tara\",\n        symbol: \"TARA\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.mainnet.taraxa.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.mainnet.taraxa.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Taraxa Explorer\",\n            url: \"https://explorer.mainnet.taraxa.io\"\n        }\n    }\n};\n// src/taraxaTestnet.ts\nvar taraxaTestnet = {\n    id: 842,\n    name: \"Taraxa Testnet\",\n    network: \"taraxa-testnet\",\n    nativeCurrency: {\n        name: \"Tara\",\n        symbol: \"TARA\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.testnet.taraxa.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.testnet.taraxa.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Taraxa Explorer\",\n            url: \"https://explorer.testnet.taraxa.io\"\n        }\n    },\n    testnet: true\n};\n// src/telos.ts\nvar telos = {\n    id: 40,\n    name: \"Telos\",\n    network: \"telos\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Telos\",\n        symbol: \"TLOS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.telos.net/evm\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.telos.net/evm\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Teloscan\",\n            url: \"https://www.teloscan.io/\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcA11bde05977b3631167028862bE2a173976CA11\",\n            blockCreated: 246530709\n        }\n    }\n};\n// src/telosTestnet.ts\nvar telosTestnet = {\n    id: 41,\n    name: \"Telos\",\n    network: \"telosTestnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Telos\",\n        symbol: \"TLOS\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://testnet.telos.net/evm\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://testnet.telos.net/evm\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"Teloscan (testnet)\",\n            url: \"https://testnet.teloscan.io/\"\n        }\n    },\n    testnet: true\n};\n// src/thunderTestnet.ts\nvar thunderTestnet = {\n    id: 997,\n    name: \"5ireChain Thunder Testnet\",\n    network: \"5ireChain\",\n    nativeCurrency: {\n        name: \"5ire Token\",\n        symbol: \"5IRE\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc-testnet.5ire.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc-testnet.5ire.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"5ireChain Explorer\",\n            url: \"https://explorer.5ire.network\"\n        }\n    },\n    testnet: true\n};\n// src/wanchain.ts\nvar wanchain = {\n    id: 888,\n    name: \"Wanchain\",\n    network: \"wanchain\",\n    nativeCurrency: {\n        name: \"WANCHAIN\",\n        symbol: \"WAN\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://gwan-ssl.wandevs.org:56891\",\n                \"https://gwan2-ssl.wandevs.org\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://gwan-ssl.wandevs.org:56891\",\n                \"https://gwan2-ssl.wandevs.org\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"WanScan\",\n            url: \"https://wanscan.org\"\n        },\n        default: {\n            name: \"WanScan\",\n            url: \"https://wanscan.org\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0xcDF6A1566e78EB4594c86Fe73Fcdc82429e97fbB\",\n            blockCreated: 25312390\n        }\n    }\n};\n// src/wanchainTestnet.ts\nvar wanchainTestnet = {\n    id: 999,\n    name: \"Wanchain Testnet\",\n    network: \"wanchainTestnet\",\n    nativeCurrency: {\n        name: \"WANCHAIN\",\n        symbol: \"WANt\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://gwan-ssl.wandevs.org:46891\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://gwan-ssl.wandevs.org:46891\"\n            ]\n        }\n    },\n    blockExplorers: {\n        etherscan: {\n            name: \"WanScanTest\",\n            url: \"https://wanscan.org\"\n        },\n        default: {\n            name: \"WanScanTest\",\n            url: \"https://wanscan.org\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0x11c89bF4496c39FB80535Ffb4c92715839CC5324\",\n            blockCreated: 24743448\n        }\n    },\n    testnet: true\n};\n// src/xdc.ts\nvar xdc = {\n    id: 50,\n    name: \"XinFin Network\",\n    network: \"xdc\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"XDC\",\n        symbol: \"XDC\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.xinfin.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.xinfin.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        xinfin: {\n            name: \"XinFin\",\n            url: \"https://explorer.xinfin.network\"\n        },\n        default: {\n            name: \"Blocksscan\",\n            url: \"https://xdc.blocksscan.io\"\n        }\n    }\n};\n// src/xdcTestnet.ts\nvar xdcTestnet = {\n    id: 51,\n    name: \"Apothem Network\",\n    network: \"xdc-testnet\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"TXDC\",\n        symbol: \"TXDC\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://erpc.apothem.network\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://erpc.apothem.network\"\n            ]\n        }\n    },\n    blockExplorers: {\n        xinfin: {\n            name: \"XinFin\",\n            url: \"https://explorer.apothem.network\"\n        },\n        default: {\n            name: \"Blocksscan\",\n            url: \"https://apothem.blocksscan.io\"\n        }\n    }\n};\n// src/zhejiang.ts\nvar zhejiang = {\n    id: 1337803,\n    network: \"zhejiang\",\n    name: \"Zhejiang\",\n    nativeCurrency: {\n        name: \"Zhejiang Ether\",\n        symbol: \"ZhejETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://rpc.zhejiang.ethpandaops.io\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://rpc.zhejiang.ethpandaops.io\"\n            ]\n        }\n    },\n    blockExplorers: {\n        beaconchain: {\n            name: \"Etherscan\",\n            url: \"https://zhejiang.beaconcha.in\"\n        },\n        blockscout: {\n            name: \"Blockscout\",\n            url: \"https://blockscout.com/eth/zhejiang-testnet\"\n        },\n        default: {\n            name: \"Beaconchain\",\n            url: \"https://zhejiang.beaconcha.in\"\n        }\n    },\n    testnet: true\n};\n// src/zkSync.ts\nvar zkSync = {\n    id: 324,\n    name: \"zkSync Era\",\n    network: \"zksync-era\",\n    nativeCurrency: {\n        decimals: 18,\n        name: \"Ether\",\n        symbol: \"ETH\"\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://mainnet.era.zksync.io\"\n            ],\n            webSocket: [\n                \"wss://mainnet.era.zksync.io/ws\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://mainnet.era.zksync.io\"\n            ],\n            webSocket: [\n                \"wss://mainnet.era.zksync.io/ws\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"zkExplorer\",\n            url: \"https://explorer.zksync.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0x47898B2C52C957663aE9AB46922dCec150a2272c\"\n        }\n    }\n};\n// src/zkSyncTestnet.ts\nvar zkSyncTestnet = {\n    id: 280,\n    name: \"zkSync Era Testnet\",\n    network: \"zksync-era-testnet\",\n    nativeCurrency: {\n        name: \"Ether\",\n        symbol: \"ETH\",\n        decimals: 18\n    },\n    rpcUrls: {\n        default: {\n            http: [\n                \"https://testnet.era.zksync.dev\"\n            ],\n            webSocket: [\n                \"wss://testnet.era.zksync.dev/ws\"\n            ]\n        },\n        public: {\n            http: [\n                \"https://testnet.era.zksync.dev\"\n            ],\n            webSocket: [\n                \"wss://testnet.era.zksync.dev/ws\"\n            ]\n        }\n    },\n    blockExplorers: {\n        default: {\n            name: \"zkExplorer\",\n            url: \"https://goerli.explorer.zksync.io\"\n        }\n    },\n    contracts: {\n        multicall3: {\n            address: \"0x89e4EDbEC85362a285d7a1D5D255ccD2b8106be2\"\n        }\n    },\n    testnet: true\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/chains/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-2VZS2JHJ.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-2VZS2JHJ.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InjectedConnector: () => (/* binding */ InjectedConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5NCTPR6C.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-5NCTPR6C.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-GISSYJN5.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers/lib/utils.js */ \"(ssr)/./node_modules/ethers/lib/utils.js\");\n\n// src/injected.ts\n\n\n\n// src/utils/getInjectedName.ts\nfunction getInjectedName(ethereum) {\n    if (!ethereum) return \"Injected\";\n    const getName = (provider)=>{\n        if (provider.isApexWallet) return \"Apex Wallet\";\n        if (provider.isAvalanche) return \"Core Wallet\";\n        if (provider.isBackpack) return \"Backpack\";\n        if (provider.isBifrost) return \"Bifrost Wallet\";\n        if (provider.isBitKeep) return \"BitKeep\";\n        if (provider.isBitski) return \"Bitski\";\n        if (provider.isBlockWallet) return \"BlockWallet\";\n        if (provider.isBraveWallet) return \"Brave Wallet\";\n        if (provider.isCoinbaseWallet) return \"Coinbase Wallet\";\n        if (provider.isDawn) return \"Dawn Wallet\";\n        if (provider.isEnkrypt) return \"Enkrypt\";\n        if (provider.isExodus) return \"Exodus\";\n        if (provider.isFrame) return \"Frame\";\n        if (provider.isFrontier) return \"Frontier Wallet\";\n        if (provider.isGamestop) return \"GameStop Wallet\";\n        if (provider.isHyperPay) return \"HyperPay Wallet\";\n        if (provider.isImToken) return \"ImToken\";\n        if (provider.isKuCoinWallet) return \"KuCoin Wallet\";\n        if (provider.isMathWallet) return \"MathWallet\";\n        if (provider.isOkxWallet || provider.isOKExWallet) return \"OKX Wallet\";\n        if (provider.isOneInchIOSWallet || provider.isOneInchAndroidWallet) return \"1inch Wallet\";\n        if (provider.isOpera) return \"Opera\";\n        if (provider.isPhantom) return \"Phantom\";\n        if (provider.isPortal) return \"Ripio Portal\";\n        if (provider.isRabby) return \"Rabby\";\n        if (provider.isRainbow) return \"Rainbow\";\n        if (provider.isStatus) return \"Status\";\n        if (provider.isTally) return \"Taho\";\n        if (provider.isTokenPocket) return \"TokenPocket\";\n        if (provider.isTokenary) return \"Tokenary\";\n        if (provider.isTrust || provider.isTrustWallet) return \"Trust Wallet\";\n        if (provider.isXDEFI) return \"XDEFI Wallet\";\n        if (provider.isZerion) return \"Zerion\";\n        if (provider.isMetaMask) return \"MetaMask\";\n    };\n    if (ethereum.providers?.length) {\n        const nameSet = /* @__PURE__ */ new Set();\n        let unknownCount = 1;\n        for (const provider of ethereum.providers){\n            let name = getName(provider);\n            if (!name) {\n                name = `Unknown Wallet #${unknownCount}`;\n                unknownCount += 1;\n            }\n            nameSet.add(name);\n        }\n        const names = [\n            ...nameSet\n        ];\n        if (names.length) return names;\n        return names[0] ?? \"Injected\";\n    }\n    return getName(ethereum) ?? \"Injected\";\n}\n// src/injected.ts\nvar _provider;\nvar InjectedConnector = class extends _chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor({ chains, options: options_ } = {}){\n        const options = {\n            shimDisconnect: true,\n            getProvider: ()=> false ? 0 : void 0,\n            ...options_\n        };\n        super({\n            chains,\n            options\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"id\", \"injected\");\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"name\");\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"ready\");\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"shimDisconnectKey\", `${this.id}.shimDisconnect`);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onAccountsChanged\", (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onChainChanged\", (chainId)=>{\n            const id = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId)(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onDisconnect\", async (error)=>{\n            if (error.code === 1013) {\n                const provider = await this.getProvider();\n                if (provider) {\n                    const isAuthorized = await this.getAccount();\n                    if (isAuthorized) return;\n                }\n            }\n            this.emit(\"disconnect\");\n            if (this.options.shimDisconnect) (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.getClient)().storage?.removeItem(this.shimDisconnectKey);\n        });\n        const provider = options.getProvider();\n        if (typeof options.name === \"string\") this.name = options.name;\n        else if (provider) {\n            const detectedName = getInjectedName(provider);\n            if (options.name) this.name = options.name(detectedName);\n            else {\n                if (typeof detectedName === \"string\") this.name = detectedName;\n                else this.name = detectedName[0];\n            }\n        } else this.name = \"Injected\";\n        this.ready = !!provider;\n    }\n    async connect({ chainId } = {}) {\n        try {\n            const provider = await this.getProvider();\n            if (!provider) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n            if (provider.on) {\n                provider.on(\"accountsChanged\", this.onAccountsChanged);\n                provider.on(\"chainChanged\", this.onChainChanged);\n                provider.on(\"disconnect\", this.onDisconnect);\n            }\n            this.emit(\"message\", {\n                type: \"connecting\"\n            });\n            const accounts = await provider.request({\n                method: \"eth_requestAccounts\"\n            });\n            const account = (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n            if (this.options.shimDisconnect) (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.getClient)().storage?.setItem(this.shimDisconnectKey, true);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                },\n                provider\n            };\n        } catch (error) {\n            if (this.isUserRejectedRequestError(error)) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            if (error.code === -32002) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ResourceUnavailableError(error);\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        if (!provider?.removeListener) return;\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\n        provider.removeListener(\"disconnect\", this.onDisconnect);\n        if (this.options.shimDisconnect) (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.getClient)().storage?.removeItem(this.shimDisconnectKey);\n    }\n    async getAccount() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        const accounts = await provider.request({\n            method: \"eth_accounts\"\n        });\n        return (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const provider = await this.getProvider();\n        if (!provider) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        return provider.request({\n            method: \"eth_chainId\"\n        }).then(_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.normalizeChainId);\n    }\n    async getProvider() {\n        const provider = this.options.getProvider();\n        if (provider) (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, provider);\n        return (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getSigner({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider(),\n            this.getAccount()\n        ]);\n        return new ethers__WEBPACK_IMPORTED_MODULE_3__.Web3Provider(provider, chainId).getSigner(account);\n    }\n    async isAuthorized() {\n        try {\n            if (this.options.shimDisconnect && !(0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.getClient)().storage?.getItem(this.shimDisconnectKey)) return false;\n            const provider = await this.getProvider();\n            if (!provider) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n            const account = await this.getAccount();\n            return !!account;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const provider = await this.getProvider();\n        if (!provider) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        const id = (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.hexValue)(chainId);\n        try {\n            await Promise.all([\n                provider.request({\n                    method: \"wallet_switchEthereumChain\",\n                    params: [\n                        {\n                            chainId: id\n                        }\n                    ]\n                }),\n                new Promise((res)=>this.on(\"change\", ({ chain })=>{\n                        if (chain?.id === chainId) res();\n                    }))\n            ]);\n            return this.chains.find((x)=>x.id === chainId) ?? {\n                id: chainId,\n                name: `Chain ${id}`,\n                network: `${id}`,\n                nativeCurrency: {\n                    name: \"Ether\",\n                    decimals: 18,\n                    symbol: \"ETH\"\n                },\n                rpcUrls: {\n                    default: {\n                        http: [\n                            \"\"\n                        ]\n                    },\n                    public: {\n                        http: [\n                            \"\"\n                        ]\n                    }\n                }\n            };\n        } catch (error) {\n            const chain = this.chains.find((x)=>x.id === chainId);\n            if (!chain) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ChainNotConfiguredError({\n                chainId,\n                connectorId: this.id\n            });\n            if (error.code === 4902 || error?.data?.originalError?.code === 4902) {\n                try {\n                    await provider.request({\n                        method: \"wallet_addEthereumChain\",\n                        params: [\n                            {\n                                chainId: id,\n                                chainName: chain.name,\n                                nativeCurrency: chain.nativeCurrency,\n                                rpcUrls: [\n                                    chain.rpcUrls.public?.http[0] ?? \"\"\n                                ],\n                                blockExplorerUrls: this.getBlockExplorerUrls(chain)\n                            }\n                        ]\n                    });\n                    const currentChainId = await this.getChainId();\n                    if (currentChainId !== chainId) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ProviderRpcError(\"User rejected switch after adding network.\", {\n                        code: 4001\n                    });\n                    return chain;\n                } catch (addError) {\n                    if (this.isUserRejectedRequestError(addError)) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(addError);\n                    throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.AddChainError();\n                }\n            }\n            if (this.isUserRejectedRequestError(error)) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n        }\n    }\n    async watchAsset({ address, decimals = 18, image, symbol }) {\n        const provider = await this.getProvider();\n        if (!provider) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.ConnectorNotFoundError();\n        return provider.request({\n            method: \"wallet_watchAsset\",\n            params: {\n                type: \"ERC20\",\n                options: {\n                    address,\n                    decimals,\n                    image,\n                    symbol\n                }\n            }\n        });\n    }\n    isUserRejectedRequestError(error) {\n        return error.code === 4001;\n    }\n};\n_provider = new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-2VZS2JHJ.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/chunk-5NCTPR6C.js":
/*!***************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/chunk-5NCTPR6C.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Connector: () => (/* binding */ Connector),\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet),\n/* harmony export */   __publicField: () => (/* binding */ __publicField)\n/* harmony export */ });\n/* harmony import */ var _wagmi_core_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @wagmi/core/chains */ \"(ssr)/./node_modules/@wagmi/chains/dist/index.mjs\");\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ \"(ssr)/./node_modules/eventemitter3/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>{\n    __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n    return value;\n};\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar __privateMethod = (obj, member, method)=>{\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n};\n// src/base.ts\n\n\nvar Connector = class extends eventemitter3__WEBPACK_IMPORTED_MODULE_0__ {\n    constructor({ chains = [\n        _wagmi_core_chains__WEBPACK_IMPORTED_MODULE_1__.mainnet,\n        _wagmi_core_chains__WEBPACK_IMPORTED_MODULE_1__.goerli\n    ], options }){\n        super();\n        __publicField(this, \"chains\");\n        __publicField(this, \"options\");\n        this.chains = chains;\n        this.options = options;\n    }\n    getBlockExplorerUrls(chain) {\n        const { default: blockExplorer, ...blockExplorers } = chain.blockExplorers ?? {};\n        if (blockExplorer) return [\n            blockExplorer.url,\n            ...Object.values(blockExplorers).map((x)=>x.url)\n        ];\n    }\n    isChainUnsupported(chainId) {\n        return !this.chains.some((x)=>x.id === chainId);\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2Nvbm5lY3RvcnMvZGlzdC9jaHVuay01TkNUUFI2Qy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUlBLFlBQVlDLE9BQU9DLGNBQWM7QUFDckMsSUFBSUMsa0JBQWtCLENBQUNDLEtBQUtDLEtBQUtDLFFBQVVELE9BQU9ELE1BQU1KLFVBQVVJLEtBQUtDLEtBQUs7UUFBRUUsWUFBWTtRQUFNQyxjQUFjO1FBQU1DLFVBQVU7UUFBTUg7SUFBTSxLQUFLRixHQUFHLENBQUNDLElBQUksR0FBR0M7QUFDMUosSUFBSUksZ0JBQWdCLENBQUNOLEtBQUtDLEtBQUtDO0lBQzdCSCxnQkFBZ0JDLEtBQUssT0FBT0MsUUFBUSxXQUFXQSxNQUFNLEtBQUtBLEtBQUtDO0lBQy9ELE9BQU9BO0FBQ1Q7QUFDQSxJQUFJSyxnQkFBZ0IsQ0FBQ1AsS0FBS1EsUUFBUUM7SUFDaEMsSUFBSSxDQUFDRCxPQUFPRSxHQUFHLENBQUNWLE1BQ2QsTUFBTVcsVUFBVSxZQUFZRjtBQUNoQztBQUNBLElBQUlHLGVBQWUsQ0FBQ1osS0FBS1EsUUFBUUs7SUFDL0JOLGNBQWNQLEtBQUtRLFFBQVE7SUFDM0IsT0FBT0ssU0FBU0EsT0FBT0MsSUFBSSxDQUFDZCxPQUFPUSxPQUFPTyxHQUFHLENBQUNmO0FBQ2hEO0FBQ0EsSUFBSWdCLGVBQWUsQ0FBQ2hCLEtBQUtRLFFBQVFOO0lBQy9CLElBQUlNLE9BQU9FLEdBQUcsQ0FBQ1YsTUFDYixNQUFNVyxVQUFVO0lBQ2xCSCxrQkFBa0JTLFVBQVVULE9BQU9VLEdBQUcsQ0FBQ2xCLE9BQU9RLE9BQU9XLEdBQUcsQ0FBQ25CLEtBQUtFO0FBQ2hFO0FBQ0EsSUFBSWtCLGVBQWUsQ0FBQ3BCLEtBQUtRLFFBQVFOLE9BQU9tQjtJQUN0Q2QsY0FBY1AsS0FBS1EsUUFBUTtJQUMzQmEsU0FBU0EsT0FBT1AsSUFBSSxDQUFDZCxLQUFLRSxTQUFTTSxPQUFPVyxHQUFHLENBQUNuQixLQUFLRTtJQUNuRCxPQUFPQTtBQUNUO0FBQ0EsSUFBSW9CLGtCQUFrQixDQUFDdEIsS0FBS1EsUUFBUWU7SUFDbENoQixjQUFjUCxLQUFLUSxRQUFRO0lBQzNCLE9BQU9lO0FBQ1Q7QUFFQSxjQUFjO0FBQ3VDO0FBQ0c7QUFDeEQsSUFBSUssWUFBWSxjQUFjRCwwQ0FBWUE7SUFDeENFLFlBQVksRUFDVkMsU0FBUztRQUFDTCx1REFBT0E7UUFBRUQsc0RBQU1BO0tBQUMsRUFDMUJPLE9BQU8sRUFDUixDQUFFO1FBQ0QsS0FBSztRQUNMekIsY0FBYyxJQUFJLEVBQUU7UUFDcEJBLGNBQWMsSUFBSSxFQUFFO1FBQ3BCLElBQUksQ0FBQ3dCLE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLE9BQU8sR0FBR0E7SUFDakI7SUFDQUMscUJBQXFCQyxLQUFLLEVBQUU7UUFDMUIsTUFBTSxFQUFFUCxTQUFTUSxhQUFhLEVBQUUsR0FBR0MsZ0JBQWdCLEdBQUdGLE1BQU1FLGNBQWMsSUFBSSxDQUFDO1FBQy9FLElBQUlELGVBQ0YsT0FBTztZQUNMQSxjQUFjRSxHQUFHO2VBQ2R2QyxPQUFPd0MsTUFBTSxDQUFDRixnQkFBZ0JHLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQSxFQUFFSCxHQUFHO1NBQ2xEO0lBQ0w7SUFDQUksbUJBQW1CQyxPQUFPLEVBQUU7UUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxJQUFJLENBQUMsQ0FBQ0gsSUFBTUEsRUFBRUksRUFBRSxLQUFLRjtJQUMzQztBQUNGO0FBU0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbml0LXdhZ21pLWV0aGVyLW9sZC12ZXJzaW9uLy4vbm9kZV9tb2R1bGVzL0B3YWdtaS9jb25uZWN0b3JzL2Rpc3QvY2h1bmstNU5DVFBSNkMuanM/MjM0NyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZGVmTm9ybWFsUHJvcCA9IChvYmosIGtleSwgdmFsdWUpID0+IGtleSBpbiBvYmogPyBfX2RlZlByb3Aob2JqLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSwgdmFsdWUgfSkgOiBvYmpba2V5XSA9IHZhbHVlO1xudmFyIF9fcHVibGljRmllbGQgPSAob2JqLCBrZXksIHZhbHVlKSA9PiB7XG4gIF9fZGVmTm9ybWFsUHJvcChvYmosIHR5cGVvZiBrZXkgIT09IFwic3ltYm9sXCIgPyBrZXkgKyBcIlwiIDoga2V5LCB2YWx1ZSk7XG4gIHJldHVybiB2YWx1ZTtcbn07XG52YXIgX19hY2Nlc3NDaGVjayA9IChvYmosIG1lbWJlciwgbXNnKSA9PiB7XG4gIGlmICghbWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBcIiArIG1zZyk7XG59O1xudmFyIF9fcHJpdmF0ZUdldCA9IChvYmosIG1lbWJlciwgZ2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwicmVhZCBmcm9tIHByaXZhdGUgZmllbGRcIik7XG4gIHJldHVybiBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogbWVtYmVyLmdldChvYmopO1xufTtcbnZhciBfX3ByaXZhdGVBZGQgPSAob2JqLCBtZW1iZXIsIHZhbHVlKSA9PiB7XG4gIGlmIChtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCB0aGUgc2FtZSBwcml2YXRlIG1lbWJlciBtb3JlIHRoYW4gb25jZVwiKTtcbiAgbWVtYmVyIGluc3RhbmNlb2YgV2Vha1NldCA/IG1lbWJlci5hZGQob2JqKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG59O1xudmFyIF9fcHJpdmF0ZVNldCA9IChvYmosIG1lbWJlciwgdmFsdWUsIHNldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcIndyaXRlIHRvIHByaXZhdGUgZmllbGRcIik7XG4gIHNldHRlciA/IHNldHRlci5jYWxsKG9iaiwgdmFsdWUpIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBfX3ByaXZhdGVNZXRob2QgPSAob2JqLCBtZW1iZXIsIG1ldGhvZCkgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcImFjY2VzcyBwcml2YXRlIG1ldGhvZFwiKTtcbiAgcmV0dXJuIG1ldGhvZDtcbn07XG5cbi8vIHNyYy9iYXNlLnRzXG5pbXBvcnQgeyBnb2VybGksIG1haW5uZXQgfSBmcm9tIFwiQHdhZ21pL2NvcmUvY2hhaW5zXCI7XG5pbXBvcnQgeyBkZWZhdWx0IGFzIEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudGVtaXR0ZXIzXCI7XG52YXIgQ29ubmVjdG9yID0gY2xhc3MgZXh0ZW5kcyBFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgY2hhaW5zID0gW21haW5uZXQsIGdvZXJsaV0sXG4gICAgb3B0aW9uc1xuICB9KSB7XG4gICAgc3VwZXIoKTtcbiAgICBfX3B1YmxpY0ZpZWxkKHRoaXMsIFwiY2hhaW5zXCIpO1xuICAgIF9fcHVibGljRmllbGQodGhpcywgXCJvcHRpb25zXCIpO1xuICAgIHRoaXMuY2hhaW5zID0gY2hhaW5zO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgZ2V0QmxvY2tFeHBsb3JlclVybHMoY2hhaW4pIHtcbiAgICBjb25zdCB7IGRlZmF1bHQ6IGJsb2NrRXhwbG9yZXIsIC4uLmJsb2NrRXhwbG9yZXJzIH0gPSBjaGFpbi5ibG9ja0V4cGxvcmVycyA/PyB7fTtcbiAgICBpZiAoYmxvY2tFeHBsb3JlcilcbiAgICAgIHJldHVybiBbXG4gICAgICAgIGJsb2NrRXhwbG9yZXIudXJsLFxuICAgICAgICAuLi5PYmplY3QudmFsdWVzKGJsb2NrRXhwbG9yZXJzKS5tYXAoKHgpID0+IHgudXJsKVxuICAgICAgXTtcbiAgfVxuICBpc0NoYWluVW5zdXBwb3J0ZWQoY2hhaW5JZCkge1xuICAgIHJldHVybiAhdGhpcy5jaGFpbnMuc29tZSgoeCkgPT4geC5pZCA9PT0gY2hhaW5JZCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7XG4gIF9fcHVibGljRmllbGQsXG4gIF9fcHJpdmF0ZUdldCxcbiAgX19wcml2YXRlQWRkLFxuICBfX3ByaXZhdGVTZXQsXG4gIF9fcHJpdmF0ZU1ldGhvZCxcbiAgQ29ubmVjdG9yXG59O1xuIl0sIm5hbWVzIjpbIl9fZGVmUHJvcCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX19kZWZOb3JtYWxQcm9wIiwib2JqIiwia2V5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJfX3B1YmxpY0ZpZWxkIiwiX19hY2Nlc3NDaGVjayIsIm1lbWJlciIsIm1zZyIsImhhcyIsIlR5cGVFcnJvciIsIl9fcHJpdmF0ZUdldCIsImdldHRlciIsImNhbGwiLCJnZXQiLCJfX3ByaXZhdGVBZGQiLCJXZWFrU2V0IiwiYWRkIiwic2V0IiwiX19wcml2YXRlU2V0Iiwic2V0dGVyIiwiX19wcml2YXRlTWV0aG9kIiwibWV0aG9kIiwiZ29lcmxpIiwibWFpbm5ldCIsImRlZmF1bHQiLCJFdmVudEVtaXR0ZXIiLCJDb25uZWN0b3IiLCJjb25zdHJ1Y3RvciIsImNoYWlucyIsIm9wdGlvbnMiLCJnZXRCbG9ja0V4cGxvcmVyVXJscyIsImNoYWluIiwiYmxvY2tFeHBsb3JlciIsImJsb2NrRXhwbG9yZXJzIiwidXJsIiwidmFsdWVzIiwibWFwIiwieCIsImlzQ2hhaW5VbnN1cHBvcnRlZCIsImNoYWluSWQiLCJzb21lIiwiaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/chunk-5NCTPR6C.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/connectors/dist/walletConnect.js":
/*!**************************************************************!*\
  !*** ./node_modules/@wagmi/connectors/dist/walletConnect.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WalletConnectConnector: () => (/* binding */ WalletConnectConnector)\n/* harmony export */ });\n/* harmony import */ var _chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-5NCTPR6C.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-5NCTPR6C.js\");\n/* harmony import */ var _wagmi_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @wagmi/core */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-GISSYJN5.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/web3-provider.js\");\n/* harmony import */ var ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers/lib/utils.js */ \"(ssr)/./node_modules/ethers/lib/utils.js\");\n\n// src/walletConnect.ts\n\n\n\nvar NAMESPACE = \"eip155\";\nvar REQUESTED_CHAINS_KEY = \"wagmi.requestedChains\";\nvar ADD_ETH_CHAIN_METHOD = \"wallet_addEthereumChain\";\nvar _provider, _initProviderPromise, _createProvider, createProvider_fn, _initProvider, initProvider_fn, _isChainsStale, isChainsStale_fn, _setupListeners, setupListeners_fn, _removeListeners, removeListeners_fn, _setRequestedChainsIds, setRequestedChainsIds_fn, _getRequestedChainsIds, getRequestedChainsIds_fn, _getNamespaceChainsIds, getNamespaceChainsIds_fn, _getNamespaceMethods, getNamespaceMethods_fn;\nvar WalletConnectConnector = class extends _chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.Connector {\n    constructor(config){\n        super({\n            ...config,\n            options: {\n                isNewChainsStale: true,\n                ...config.options\n            }\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _createProvider);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _initProvider);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _isChainsStale);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _setupListeners);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _removeListeners);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _setRequestedChainsIds);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getRequestedChainsIds);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getNamespaceChainsIds);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _getNamespaceMethods);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"id\", \"walletConnect\");\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"name\", \"WalletConnect\");\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"ready\", true);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _provider, void 0);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateAdd)(this, _initProviderPromise, void 0);\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onAccountsChanged\", (accounts)=>{\n            if (accounts.length === 0) this.emit(\"disconnect\");\n            else this.emit(\"change\", {\n                account: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0])\n            });\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onChainChanged\", (chainId)=>{\n            const id = Number(chainId);\n            const unsupported = this.isChainUnsupported(id);\n            this.emit(\"change\", {\n                chain: {\n                    id,\n                    unsupported\n                }\n            });\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onDisconnect\", ()=>{\n            (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);\n            this.emit(\"disconnect\");\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onDisplayUri\", (uri)=>{\n            this.emit(\"message\", {\n                type: \"display_uri\",\n                data: uri\n            });\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__publicField)(this, \"onConnect\", ()=>{\n            this.emit(\"connect\", {\n                provider: (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)\n            });\n        });\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _createProvider, createProvider_fn).call(this);\n    }\n    async connect({ chainId, pairingTopic } = {}) {\n        try {\n            let targetChainId = chainId;\n            if (!targetChainId) {\n                const lastUsedChainId = (0,_wagmi_core__WEBPACK_IMPORTED_MODULE_2__.getClient)().lastUsedChainId;\n                if (lastUsedChainId && !this.isChainUnsupported(lastUsedChainId)) targetChainId = lastUsedChainId;\n                else targetChainId = this.chains[0]?.id;\n            }\n            if (!targetChainId) throw new Error(\"No chains found on connector.\");\n            const provider = await this.getProvider();\n            (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setupListeners, setupListeners_fn).call(this);\n            const isChainsStale = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _isChainsStale, isChainsStale_fn).call(this);\n            if (provider.session && isChainsStale) await provider.disconnect();\n            if (!provider.session || isChainsStale) {\n                const optionalChains = this.chains.filter((chain)=>chain.id !== targetChainId).map((optionalChain)=>optionalChain.id);\n                this.emit(\"message\", {\n                    type: \"connecting\"\n                });\n                await provider.connect({\n                    pairingTopic,\n                    chains: [\n                        targetChainId\n                    ],\n                    optionalChains\n                });\n                (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, this.chains.map(({ id: id2 })=>id2));\n            }\n            const accounts = await provider.enable();\n            const account = (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n            const id = await this.getChainId();\n            const unsupported = this.isChainUnsupported(id);\n            return {\n                account,\n                chain: {\n                    id,\n                    unsupported\n                },\n                provider: new ethers__WEBPACK_IMPORTED_MODULE_3__.Web3Provider(provider)\n            };\n        } catch (error) {\n            if (/user rejected/i.test(error?.message)) {\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            }\n            throw error;\n        }\n    }\n    async disconnect() {\n        const provider = await this.getProvider();\n        try {\n            await provider.disconnect();\n        } catch (error) {\n            if (!/No matching key/i.test(error.message)) throw error;\n        } finally{\n            (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _removeListeners, removeListeners_fn).call(this);\n            (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, []);\n        }\n    }\n    async getAccount() {\n        const { accounts } = await this.getProvider();\n        return (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAddress)(accounts[0]);\n    }\n    async getChainId() {\n        const { chainId } = await this.getProvider();\n        return chainId;\n    }\n    async getProvider({ chainId } = {}) {\n        if (!(0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) await (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _createProvider, createProvider_fn).call(this);\n        if (chainId) await this.switchChain(chainId);\n        return (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider);\n    }\n    async getSigner({ chainId } = {}) {\n        const [provider, account] = await Promise.all([\n            this.getProvider({\n                chainId\n            }),\n            this.getAccount()\n        ]);\n        return new ethers__WEBPACK_IMPORTED_MODULE_3__.Web3Provider(provider, chainId).getSigner(account);\n    }\n    async isAuthorized() {\n        try {\n            const [account, provider] = await Promise.all([\n                this.getAccount(),\n                this.getProvider()\n            ]);\n            const isChainsStale = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _isChainsStale, isChainsStale_fn).call(this);\n            if (!account) return false;\n            if (isChainsStale && provider.session) {\n                try {\n                    await provider.disconnect();\n                } catch  {}\n                return false;\n            }\n            return true;\n        } catch  {\n            return false;\n        }\n    }\n    async switchChain(chainId) {\n        const chain = this.chains.find((chain2)=>chain2.id === chainId);\n        if (!chain) throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(new Error(\"chain not found on connector.\"));\n        try {\n            const provider = await this.getProvider();\n            const namespaceChains = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);\n            const namespaceMethods = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);\n            const isChainApproved = namespaceChains.includes(chainId);\n            if (!isChainApproved && namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) {\n                await provider.request({\n                    method: ADD_ETH_CHAIN_METHOD,\n                    params: [\n                        {\n                            chainId: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.hexValue)(chain.id),\n                            blockExplorerUrls: [\n                                chain.blockExplorers?.default.url\n                            ],\n                            chainName: chain.name,\n                            nativeCurrency: chain.nativeCurrency,\n                            rpcUrls: [\n                                ...chain.rpcUrls.default.http\n                            ]\n                        }\n                    ]\n                });\n                const requestedChains = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);\n                requestedChains.push(chainId);\n                (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _setRequestedChainsIds, setRequestedChainsIds_fn).call(this, requestedChains);\n            }\n            await provider.request({\n                method: \"wallet_switchEthereumChain\",\n                params: [\n                    {\n                        chainId: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_1__.hexValue)(chainId)\n                    }\n                ]\n            });\n            return chain;\n        } catch (error) {\n            const message = typeof error === \"string\" ? error : error?.message;\n            if (/user rejected request/i.test(message)) {\n                throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.UserRejectedRequestError(error);\n            }\n            throw new _wagmi_core__WEBPACK_IMPORTED_MODULE_2__.SwitchChainError(error);\n        }\n    }\n};\n_provider = new WeakMap();\n_initProviderPromise = new WeakMap();\n_createProvider = new WeakSet();\ncreateProvider_fn = async function() {\n    if (!(0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _initProviderPromise) && \"undefined\" !== \"undefined\") {}\n    return (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _initProviderPromise);\n};\n_initProvider = new WeakSet();\ninitProvider_fn = async function() {\n    const { default: EthereumProvider, OPTIONAL_EVENTS, OPTIONAL_METHODS } = await Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/@walletconnect\"), __webpack_require__.e(\"vendor-chunks/multiformats\"), __webpack_require__.e(\"vendor-chunks/@stablelib\"), __webpack_require__.e(\"vendor-chunks/pino\"), __webpack_require__.e(\"vendor-chunks/ws\"), __webpack_require__.e(\"vendor-chunks/uint8arrays\"), __webpack_require__.e(\"vendor-chunks/fast-redact\"), __webpack_require__.e(\"vendor-chunks/whatwg-url\"), __webpack_require__.e(\"vendor-chunks/pino-std-serializers\"), __webpack_require__.e(\"vendor-chunks/thread-stream\"), __webpack_require__.e(\"vendor-chunks/unstorage\"), __webpack_require__.e(\"vendor-chunks/utf-8-validate\"), __webpack_require__.e(\"vendor-chunks/tr46\"), __webpack_require__.e(\"vendor-chunks/node-gyp-build\"), __webpack_require__.e(\"vendor-chunks/bufferutil\"), __webpack_require__.e(\"vendor-chunks/node-fetch\"), __webpack_require__.e(\"vendor-chunks/idb-keyval\"), __webpack_require__.e(\"vendor-chunks/destr\"), __webpack_require__.e(\"vendor-chunks/sonic-boom\"), __webpack_require__.e(\"vendor-chunks/webidl-conversions\"), __webpack_require__.e(\"vendor-chunks/tslib\"), __webpack_require__.e(\"vendor-chunks/strict-uri-encode\"), __webpack_require__.e(\"vendor-chunks/split-on-first\"), __webpack_require__.e(\"vendor-chunks/safe-stable-stringify\"), __webpack_require__.e(\"vendor-chunks/quick-format-unescaped\"), __webpack_require__.e(\"vendor-chunks/process-warning\"), __webpack_require__.e(\"vendor-chunks/on-exit-leak-free\"), __webpack_require__.e(\"vendor-chunks/lodash.isequal\"), __webpack_require__.e(\"vendor-chunks/filter-obj\"), __webpack_require__.e(\"vendor-chunks/detect-browser\"), __webpack_require__.e(\"vendor-chunks/decode-uri-component\"), __webpack_require__.e(\"vendor-chunks/cross-fetch\"), __webpack_require__.e(\"vendor-chunks/atomic-sleep\")]).then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/ethereum-provider */ \"(ssr)/./node_modules/@walletconnect/ethereum-provider/dist/index.es.js\"));\n    const [defaultChain, ...optionalChains] = this.chains.map(({ id })=>id);\n    if (defaultChain) {\n        const { projectId, showQrModal = true, qrModalOptions } = this.options;\n        (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateSet)(this, _provider, await EthereumProvider.init({\n            showQrModal,\n            qrModalOptions,\n            projectId,\n            optionalMethods: OPTIONAL_METHODS,\n            optionalEvents: OPTIONAL_EVENTS,\n            chains: [\n                defaultChain\n            ],\n            optionalChains,\n            rpcMap: Object.fromEntries(this.chains.map((chain)=>[\n                    chain.id,\n                    chain.rpcUrls.default.http[0]\n                ]))\n        }));\n    }\n};\n_isChainsStale = new WeakSet();\nisChainsStale_fn = function() {\n    const namespaceMethods = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceMethods, getNamespaceMethods_fn).call(this);\n    if (namespaceMethods.includes(ADD_ETH_CHAIN_METHOD)) return false;\n    if (!this.options.isNewChainsStale) return false;\n    const requestedChains = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getRequestedChainsIds, getRequestedChainsIds_fn).call(this);\n    const connectorChains = this.chains.map(({ id })=>id);\n    const namespaceChains = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _getNamespaceChainsIds, getNamespaceChainsIds_fn).call(this);\n    if (namespaceChains.length && !namespaceChains.some((id)=>connectorChains.includes(id))) return false;\n    return !connectorChains.every((id)=>requestedChains.includes(id));\n};\n_setupListeners = new WeakSet();\nsetupListeners_fn = function() {\n    if (!(0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateMethod)(this, _removeListeners, removeListeners_fn).call(this);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"accountsChanged\", this.onAccountsChanged);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"chainChanged\", this.onChainChanged);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"disconnect\", this.onDisconnect);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"session_delete\", this.onDisconnect);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"display_uri\", this.onDisplayUri);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).on(\"connect\", this.onConnect);\n};\n_removeListeners = new WeakSet();\nremoveListeners_fn = function() {\n    if (!(0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return;\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"accountsChanged\", this.onAccountsChanged);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"chainChanged\", this.onChainChanged);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"disconnect\", this.onDisconnect);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"session_delete\", this.onDisconnect);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"display_uri\", this.onDisplayUri);\n    (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).removeListener(\"connect\", this.onConnect);\n};\n_setRequestedChainsIds = new WeakSet();\nsetRequestedChainsIds_fn = function(chains) {\n    localStorage.setItem(REQUESTED_CHAINS_KEY, JSON.stringify(chains));\n};\n_getRequestedChainsIds = new WeakSet();\ngetRequestedChainsIds_fn = function() {\n    const data = localStorage.getItem(REQUESTED_CHAINS_KEY);\n    return data ? JSON.parse(data) : [];\n};\n_getNamespaceChainsIds = new WeakSet();\ngetNamespaceChainsIds_fn = function() {\n    if (!(0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return [];\n    const chainIds = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).session?.namespaces[NAMESPACE]?.chains?.map((chain)=>parseInt(chain.split(\":\")[1] || \"\"));\n    return chainIds ?? [];\n};\n_getNamespaceMethods = new WeakSet();\ngetNamespaceMethods_fn = function() {\n    if (!(0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider)) return [];\n    const methods = (0,_chunk_5NCTPR6C_js__WEBPACK_IMPORTED_MODULE_0__.__privateGet)(this, _provider).session?.namespaces[NAMESPACE]?.methods;\n    return methods ?? [];\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/connectors/dist/walletConnect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/chunk-GISSYJN5.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/chunk-GISSYJN5.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddChainError: () => (/* binding */ AddChainError),\n/* harmony export */   ChainDoesNotSupportMulticallError: () => (/* binding */ ChainDoesNotSupportMulticallError),\n/* harmony export */   ChainMismatchError: () => (/* binding */ ChainMismatchError),\n/* harmony export */   ChainNotConfiguredError: () => (/* binding */ ChainNotConfiguredError),\n/* harmony export */   Client: () => (/* binding */ Client),\n/* harmony export */   ConnectorAlreadyConnectedError: () => (/* binding */ ConnectorAlreadyConnectedError),\n/* harmony export */   ConnectorNotFoundError: () => (/* binding */ ConnectorNotFoundError),\n/* harmony export */   ContractMethodDoesNotExistError: () => (/* binding */ ContractMethodDoesNotExistError),\n/* harmony export */   ContractMethodNoResultError: () => (/* binding */ ContractMethodNoResultError),\n/* harmony export */   ContractMethodRevertedError: () => (/* binding */ ContractMethodRevertedError),\n/* harmony export */   ContractResultDecodeError: () => (/* binding */ ContractResultDecodeError),\n/* harmony export */   ProviderChainsNotFound: () => (/* binding */ ProviderChainsNotFound),\n/* harmony export */   ProviderRpcError: () => (/* binding */ ProviderRpcError),\n/* harmony export */   ResourceUnavailableError: () => (/* binding */ ResourceUnavailableError),\n/* harmony export */   RpcError: () => (/* binding */ RpcError),\n/* harmony export */   SwitchChainError: () => (/* binding */ SwitchChainError),\n/* harmony export */   SwitchChainNotSupportedError: () => (/* binding */ SwitchChainNotSupportedError),\n/* harmony export */   UserRejectedRequestError: () => (/* binding */ UserRejectedRequestError),\n/* harmony export */   configureChains: () => (/* binding */ configureChains),\n/* harmony export */   connect: () => (/* binding */ connect),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   deepEqual: () => (/* binding */ deepEqual),\n/* harmony export */   deserialize: () => (/* binding */ deserialize),\n/* harmony export */   disconnect: () => (/* binding */ disconnect),\n/* harmony export */   erc20ABI: () => (/* binding */ erc20ABI),\n/* harmony export */   erc4626ABI: () => (/* binding */ erc4626ABI),\n/* harmony export */   erc721ABI: () => (/* binding */ erc721ABI),\n/* harmony export */   fetchBalance: () => (/* binding */ fetchBalance),\n/* harmony export */   fetchBlockNumber: () => (/* binding */ fetchBlockNumber),\n/* harmony export */   fetchEnsAddress: () => (/* binding */ fetchEnsAddress),\n/* harmony export */   fetchEnsAvatar: () => (/* binding */ fetchEnsAvatar),\n/* harmony export */   fetchEnsName: () => (/* binding */ fetchEnsName),\n/* harmony export */   fetchEnsResolver: () => (/* binding */ fetchEnsResolver),\n/* harmony export */   fetchFeeData: () => (/* binding */ fetchFeeData),\n/* harmony export */   fetchSigner: () => (/* binding */ fetchSigner),\n/* harmony export */   fetchToken: () => (/* binding */ fetchToken),\n/* harmony export */   fetchTransaction: () => (/* binding */ fetchTransaction),\n/* harmony export */   getAccount: () => (/* binding */ getAccount),\n/* harmony export */   getClient: () => (/* binding */ getClient),\n/* harmony export */   getContract: () => (/* binding */ getContract),\n/* harmony export */   getNetwork: () => (/* binding */ getNetwork),\n/* harmony export */   getProvider: () => (/* binding */ getProvider),\n/* harmony export */   getWebSocketProvider: () => (/* binding */ getWebSocketProvider),\n/* harmony export */   minimizeContractInterface: () => (/* binding */ minimizeContractInterface),\n/* harmony export */   multicall: () => (/* binding */ multicall),\n/* harmony export */   noopStorage: () => (/* binding */ noopStorage),\n/* harmony export */   normalizeChainId: () => (/* binding */ normalizeChainId),\n/* harmony export */   parseContractResult: () => (/* binding */ parseContractResult),\n/* harmony export */   prepareSendTransaction: () => (/* binding */ prepareSendTransaction),\n/* harmony export */   prepareWriteContract: () => (/* binding */ prepareWriteContract),\n/* harmony export */   readContract: () => (/* binding */ readContract),\n/* harmony export */   readContracts: () => (/* binding */ readContracts),\n/* harmony export */   sendTransaction: () => (/* binding */ sendTransaction),\n/* harmony export */   serialize: () => (/* binding */ serialize),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   signTypedData: () => (/* binding */ signTypedData),\n/* harmony export */   switchNetwork: () => (/* binding */ switchNetwork),\n/* harmony export */   units: () => (/* binding */ units),\n/* harmony export */   waitForTransaction: () => (/* binding */ waitForTransaction),\n/* harmony export */   watchAccount: () => (/* binding */ watchAccount),\n/* harmony export */   watchBlockNumber: () => (/* binding */ watchBlockNumber),\n/* harmony export */   watchContractEvent: () => (/* binding */ watchContractEvent),\n/* harmony export */   watchMulticall: () => (/* binding */ watchMulticall),\n/* harmony export */   watchNetwork: () => (/* binding */ watchNetwork),\n/* harmony export */   watchPendingTransactions: () => (/* binding */ watchPendingTransactions),\n/* harmony export */   watchProvider: () => (/* binding */ watchProvider),\n/* harmony export */   watchReadContract: () => (/* binding */ watchReadContract),\n/* harmony export */   watchReadContracts: () => (/* binding */ watchReadContracts),\n/* harmony export */   watchSigner: () => (/* binding */ watchSigner),\n/* harmony export */   watchWebSocketProvider: () => (/* binding */ watchWebSocketProvider),\n/* harmony export */   writeContract: () => (/* binding */ writeContract)\n/* harmony export */ });\n/* harmony import */ var _chunk_BVC4KGLQ_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./chunk-BVC4KGLQ.js */ \"(ssr)/./node_modules/@wagmi/connectors/dist/chunk-2VZS2JHJ.js\");\n/* harmony import */ var _chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./chunk-MQXBDTVK.js */ \"(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/fallback-provider.js\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/zustand/esm/vanilla.mjs\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers/lib/utils.js */ \"(ssr)/./node_modules/ethers/lib/utils.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/contracts/lib.esm/index.js\");\n/* harmony import */ var zustand_shallow__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! zustand/shallow */ \"(ssr)/./node_modules/zustand/esm/shallow.mjs\");\n\n\n// src/utils/configureChains.ts\n\nfunction configureChains(defaultChains, providers2, { minQuorum = 1, pollingInterval = 4e3, targetQuorum = 1, stallTimeout } = {}) {\n    if (!defaultChains.length) throw new Error(\"must have at least one chain\");\n    if (targetQuorum < minQuorum) throw new Error(\"quorum cannot be lower than minQuorum\");\n    let chains = [];\n    const providers_ = {};\n    const webSocketProviders_ = {};\n    for (const chain of defaultChains){\n        let configExists = false;\n        for (const provider of providers2){\n            const apiConfig = provider(chain);\n            if (!apiConfig) continue;\n            configExists = true;\n            if (!chains.some(({ id })=>id === chain.id)) {\n                chains = [\n                    ...chains,\n                    apiConfig.chain\n                ];\n            }\n            providers_[chain.id] = [\n                ...providers_[chain.id] || [],\n                apiConfig.provider\n            ];\n            if (apiConfig.webSocketProvider) {\n                webSocketProviders_[chain.id] = [\n                    ...webSocketProviders_[chain.id] || [],\n                    apiConfig.webSocketProvider\n                ];\n            }\n        }\n        if (!configExists) {\n            throw new Error([\n                `Could not find valid provider configuration for chain \"${chain.name}\".\n`,\n                \"You may need to add `jsonRpcProvider` to `configureChains` with the chain's RPC URLs.\",\n                \"Read more: https://wagmi.sh/core/providers/jsonRpc\"\n            ].join(\"\\n\"));\n        }\n    }\n    return {\n        chains,\n        provider: ({ chainId })=>{\n            const activeChain = chains.find((x)=>x.id === chainId) ?? defaultChains[0];\n            const chainProviders = providers_[activeChain.id];\n            if (!chainProviders || !chainProviders[0]) throw new Error(`No providers configured for chain \"${activeChain.id}\"`);\n            let provider;\n            if (chainProviders.length === 1) {\n                provider = chainProviders[0]();\n            } else {\n                provider = fallbackProvider(targetQuorum, minQuorum, chainProviders, {\n                    stallTimeout\n                });\n            }\n            if (activeChain.id === 42220) {\n                provider.formatter.formats.block = {\n                    ...provider.formatter.formats.block,\n                    difficulty: ()=>0,\n                    gasLimit: ()=>0\n                };\n            }\n            return Object.assign(provider, {\n                chains,\n                pollingInterval\n            });\n        },\n        webSocketProvider: ({ chainId })=>{\n            const activeChain = chains.find((x)=>x.id === chainId) ?? defaultChains[0];\n            const chainWebSocketProviders = webSocketProviders_[activeChain.id];\n            if (!chainWebSocketProviders) return void 0;\n            const provider = chainWebSocketProviders[0]?.();\n            if (provider && activeChain.id === 42220) {\n                provider.formatter.formats.block = {\n                    ...provider.formatter.formats.block,\n                    difficulty: ()=>0,\n                    gasLimit: ()=>0\n                };\n            }\n            return Object.assign(provider || {}, {\n                chains\n            });\n        }\n    };\n}\nfunction fallbackProvider(targetQuorum, minQuorum, providers_, { stallTimeout }) {\n    try {\n        return new ethers__WEBPACK_IMPORTED_MODULE_0__.FallbackProvider(providers_.map((chainProvider, index)=>{\n            const provider = chainProvider();\n            return {\n                provider,\n                priority: provider.priority ?? index,\n                stallTimeout: provider.stallTimeout ?? stallTimeout,\n                weight: provider.weight\n            };\n        }), targetQuorum);\n    } catch (error) {\n        if (error?.message?.includes(\"quorum will always fail; larger than total weight\")) {\n            if (targetQuorum === minQuorum) throw error;\n            return fallbackProvider(targetQuorum - 1, minQuorum, providers_, {\n                stallTimeout\n            });\n        }\n        throw error;\n    }\n}\n// src/client.ts\n\n\n// src/utils/assertActiveChain.ts\nfunction assertActiveChain({ chainId, signer }) {\n    const { chain: activeChain, chains } = getNetwork();\n    const activeChainId = activeChain?.id;\n    if (activeChainId && chainId !== activeChainId) {\n        throw new ChainMismatchError({\n            activeChain: chains.find((x)=>x.id === activeChainId)?.name ?? `Chain ${activeChainId}`,\n            targetChain: chains.find((x)=>x.id === chainId)?.name ?? `Chain ${chainId}`\n        });\n    }\n    if (signer) {\n        const signerChainId = signer.provider?.network?.chainId;\n        if (signerChainId && chainId !== signerChainId) {\n            const connector = getClient().connector;\n            throw new ChainNotConfiguredError({\n                chainId,\n                connectorId: connector?.id ?? \"unknown\"\n            });\n        }\n    }\n}\n// src/utils/debounce.ts\nfunction debounce(fn, waitTime = 0) {\n    let timeout;\n    return function(...args) {\n        if (!waitTime) return fn(...args);\n        if (timeout) clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            timeout = null;\n            fn(...args);\n        }, waitTime);\n    };\n}\n// src/utils/deepEqual.ts\nfunction deepEqual(a, b) {\n    if (a === b) return true;\n    if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n        if (a.constructor !== b.constructor) return false;\n        let length;\n        let i;\n        if (Array.isArray(a) && Array.isArray(b)) {\n            length = a.length;\n            if (length != b.length) return false;\n            for(i = length; i-- !== 0;)if (!deepEqual(a[i], b[i])) return false;\n            return true;\n        }\n        if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n        if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n        const keys = Object.keys(a);\n        length = keys.length;\n        if (length !== Object.keys(b).length) return false;\n        for(i = length; i-- !== 0;)if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n        for(i = length; i-- !== 0;){\n            const key = keys[i];\n            if (key && !deepEqual(a[key], b[key])) return false;\n        }\n        return true;\n    }\n    return a !== a && b !== b;\n}\n// src/utils/deserialize.ts\n\nvar findAndReplace = (cacheRef, { find, replace })=>{\n    if (cacheRef && find(cacheRef)) {\n        return replace(cacheRef);\n    }\n    if (typeof cacheRef !== \"object\") {\n        return cacheRef;\n    }\n    if (Array.isArray(cacheRef)) {\n        return cacheRef.map((item)=>findAndReplace(item, {\n                find,\n                replace\n            }));\n    }\n    if (cacheRef instanceof Object) {\n        return Object.entries(cacheRef).reduce((curr, [key, value])=>({\n                ...curr,\n                [key]: findAndReplace(value, {\n                    find,\n                    replace\n                })\n            }), {});\n    }\n    return cacheRef;\n};\nfunction deserialize(cachedString) {\n    const cache = JSON.parse(cachedString);\n    const deserializedCacheWithBigNumbers = findAndReplace(cache, {\n        find: (data)=>data.type === \"BigNumber\",\n        replace: (data)=>ethers__WEBPACK_IMPORTED_MODULE_1__.BigNumber.from(data.hex)\n    });\n    return deserializedCacheWithBigNumbers;\n}\n// src/utils/normalizeFunctionName.ts\n\n\nfunction normalizeFunctionName({ contract, functionName, args = [] }) {\n    if (functionName in contract.functions) return functionName;\n    const argsLength = args?.length ?? 0;\n    const overloadFunctions = Object.keys(contract.functions).filter((x)=>x.startsWith(`${functionName}(`)).map((x)=>({\n            name: x,\n            fragment: ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.FunctionFragment.fromString(x)\n        })).filter((x)=>argsLength === x.fragment.inputs.length);\n    for (const overloadFunction of overloadFunctions){\n        const matched = args.every((arg, index)=>{\n            const abiParameter = overloadFunction.fragment.inputs[index];\n            return isArgOfType(arg, abiParameter);\n        });\n        if (matched) return overloadFunction.name;\n    }\n    return functionName;\n}\nfunction isArgOfType(arg, abiParameter) {\n    const argType = typeof arg;\n    const abiParameterType = abiParameter.type;\n    switch(abiParameterType){\n        case \"address\":\n            return (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.isAddress)(arg);\n        case \"bool\":\n            return argType === \"boolean\";\n        case \"function\":\n            return argType === \"string\";\n        case \"string\":\n            return argType === \"string\";\n        default:\n            {\n                if (abiParameterType === \"tuple\" && \"components\" in abiParameter) return Object.values(abiParameter.components).every((component, index)=>{\n                    return isArgOfType(Object.values(arg)[index], component);\n                });\n                if (/^u?int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?$/.test(abiParameterType)) return argType === \"number\" || argType === \"bigint\" || ethers__WEBPACK_IMPORTED_MODULE_1__.BigNumber.isBigNumber(arg);\n                if (/^bytes([1-9]|1[0-9]|2[0-9]|3[0-2])?$/.test(abiParameterType)) return argType === \"string\" || arg instanceof Uint8Array;\n                if (/[a-z]+[1-9]{0,3}(\\[[0-9]{0,}\\])+$/.test(abiParameterType)) {\n                    return Array.isArray(arg) && arg.every((x)=>isArgOfType(x, {\n                            ...abiParameter,\n                            type: abiParameterType.replace(/(\\[[0-9]{0,}\\])$/, \"\")\n                        }));\n                }\n                return false;\n            }\n    }\n}\n// src/utils/logger.ts\nfunction logWarn(message) {\n    getClient()?.config.logger?.warn?.(message);\n}\n// src/utils/minimizeContractInterface.ts\n\n\nfunction minimizeContractInterface(config) {\n    try {\n        const minimizedAbi = config.abi.filter((x)=>x.type === \"function\" && x.name === config.functionName);\n        if (minimizedAbi.length === 0) throw new Error(\"Invalid ABI\");\n        return minimizedAbi;\n    } catch (error) {\n        const abi = ethers__WEBPACK_IMPORTED_MODULE_3__.Contract.getInterface(config.abi).format(ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.FormatTypes.full);\n        const minimizedInterface = Array.isArray(abi) ? abi : [\n            abi\n        ];\n        return minimizedInterface.filter((i)=>i.includes(config.functionName));\n    }\n}\n// src/utils/normalizeChainId.ts\nfunction normalizeChainId(chainId) {\n    if (typeof chainId === \"string\") return Number.parseInt(chainId, chainId.trim().substring(0, 2) === \"0x\" ? 16 : 10);\n    if (typeof chainId === \"bigint\") return Number(chainId);\n    return chainId;\n}\n// src/utils/parseContractResult.ts\n\nfunction isPlainArray(value) {\n    return Array.isArray(value) && Object.keys(value).length === value.length;\n}\nfunction parseContractResult({ abi, data, functionName }) {\n    if (data && isPlainArray(data)) {\n        const iface = ethers__WEBPACK_IMPORTED_MODULE_3__.Contract.getInterface(abi);\n        const fragment = iface.getFunction(functionName);\n        const isTuple = (fragment.outputs?.length || 0) > 1;\n        const data_ = isTuple ? data : [\n            data\n        ];\n        const encodedResult = iface.encodeFunctionResult(functionName, data_);\n        const decodedResult = iface.decodeFunctionResult(functionName, encodedResult);\n        return isTuple ? decodedResult : decodedResult[0];\n    }\n    return data;\n}\n// src/utils/serialize.ts\nfunction getReferenceKey(keys, cutoff) {\n    return keys.slice(0, cutoff).join(\".\") || \".\";\n}\nfunction getCutoff(array, value) {\n    const { length } = array;\n    for(let index = 0; index < length; ++index){\n        if (array[index] === value) {\n            return index + 1;\n        }\n    }\n    return 0;\n}\nfunction createReplacer(replacer, circularReplacer) {\n    const hasReplacer = typeof replacer === \"function\";\n    const hasCircularReplacer = typeof circularReplacer === \"function\";\n    const cache = [];\n    const keys = [];\n    return function replace(key, value) {\n        if (typeof value === \"object\") {\n            if (cache.length) {\n                const thisCutoff = getCutoff(cache, this);\n                if (thisCutoff === 0) {\n                    cache[cache.length] = this;\n                } else {\n                    cache.splice(thisCutoff);\n                    keys.splice(thisCutoff);\n                }\n                keys[keys.length] = key;\n                const valueCutoff = getCutoff(cache, value);\n                if (valueCutoff !== 0) {\n                    return hasCircularReplacer ? circularReplacer.call(this, key, value, getReferenceKey(keys, valueCutoff)) : `[ref=${getReferenceKey(keys, valueCutoff)}]`;\n                }\n            } else {\n                cache[0] = value;\n                keys[0] = key;\n            }\n        }\n        return hasReplacer ? replacer.call(this, key, value) : value;\n    };\n}\nfunction serialize(value, replacer, indent, circularReplacer) {\n    return JSON.stringify(value, createReplacer(replacer, circularReplacer), indent ?? void 0);\n}\n// src/storage.ts\nvar noopStorage = {\n    getItem: (_key)=>\"\",\n    setItem: (_key, _value)=>null,\n    removeItem: (_key)=>null\n};\nfunction createStorage({ deserialize: deserialize2 = deserialize, key: prefix = \"wagmi\", serialize: serialize2 = serialize, storage }) {\n    return {\n        ...storage,\n        getItem: (key, defaultState = null)=>{\n            const value = storage.getItem(`${prefix}.${key}`);\n            try {\n                return value ? deserialize2(value) : defaultState;\n            } catch (error) {\n                console.warn(error);\n                return defaultState;\n            }\n        },\n        setItem: (key, value)=>{\n            if (value === null) {\n                storage.removeItem(`${prefix}.${key}`);\n            } else {\n                try {\n                    storage.setItem(`${prefix}.${key}`, serialize2(value));\n                } catch (err) {\n                    console.error(err);\n                }\n            }\n        },\n        removeItem: (key)=>storage.removeItem(`${prefix}.${key}`)\n    };\n}\n// src/client.ts\nvar storeKey = \"store\";\nvar _isAutoConnecting, _lastUsedConnector, _addEffects, addEffects_fn;\nvar Client = class {\n    constructor({ autoConnect = false, connectors = [\n        new _chunk_BVC4KGLQ_js__WEBPACK_IMPORTED_MODULE_4__.InjectedConnector()\n    ], provider, storage = createStorage({\n        storage:  false ? 0 : noopStorage\n    }), logger = {\n        warn: console.warn\n    }, webSocketProvider }){\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateAdd)(this, _addEffects);\n        this.providers = /* @__PURE__ */ new Map();\n        this.webSocketProviders = /* @__PURE__ */ new Map();\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateAdd)(this, _isAutoConnecting, void 0);\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateAdd)(this, _lastUsedConnector, void 0);\n        this.config = {\n            autoConnect,\n            connectors,\n            logger,\n            provider,\n            storage,\n            webSocketProvider\n        };\n        let status = \"disconnected\";\n        let chainId;\n        if (autoConnect) {\n            try {\n                const rawState = storage.getItem(storeKey);\n                const data = rawState?.state?.data;\n                status = data?.account ? \"reconnecting\" : \"connecting\";\n                chainId = data?.chain?.id;\n            } catch (_error) {}\n        }\n        this.store = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_6__.createStore)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_7__.subscribeWithSelector)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_7__.persist)(()=>({\n                connectors: typeof connectors === \"function\" ? connectors() : connectors,\n                provider: this.getProvider({\n                    chainId\n                }),\n                status,\n                webSocketProvider: this.getWebSocketProvider({\n                    chainId\n                })\n            }), {\n            name: storeKey,\n            storage,\n            partialize: (state)=>({\n                    ...autoConnect && {\n                        data: {\n                            account: state?.data?.account,\n                            chain: state?.data?.chain\n                        }\n                    },\n                    chains: state?.chains\n                }),\n            version: 2\n        })));\n        this.storage = storage;\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateSet)(this, _lastUsedConnector, storage?.getItem(\"wallet\"));\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateMethod)(this, _addEffects, addEffects_fn).call(this);\n        if (autoConnect && \"undefined\" !== \"undefined\") {}\n    }\n    get chains() {\n        return this.store.getState().chains;\n    }\n    get connectors() {\n        return this.store.getState().connectors;\n    }\n    get connector() {\n        return this.store.getState().connector;\n    }\n    get data() {\n        return this.store.getState().data;\n    }\n    get error() {\n        return this.store.getState().error;\n    }\n    get lastUsedChainId() {\n        return this.data?.chain?.id;\n    }\n    get provider() {\n        return this.store.getState().provider;\n    }\n    get status() {\n        return this.store.getState().status;\n    }\n    get subscribe() {\n        return this.store.subscribe;\n    }\n    get webSocketProvider() {\n        return this.store.getState().webSocketProvider;\n    }\n    setState(updater) {\n        const newState = typeof updater === \"function\" ? updater(this.store.getState()) : updater;\n        this.store.setState(newState, true);\n    }\n    clearState() {\n        this.setState((x)=>({\n                ...x,\n                chains: void 0,\n                connector: void 0,\n                data: void 0,\n                error: void 0,\n                status: \"disconnected\"\n            }));\n    }\n    async destroy() {\n        if (this.connector) await this.connector.disconnect?.();\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateSet)(this, _isAutoConnecting, false);\n        this.clearState();\n        this.store.destroy();\n    }\n    async autoConnect() {\n        if ((0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateGet)(this, _isAutoConnecting)) return;\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateSet)(this, _isAutoConnecting, true);\n        this.setState((x)=>({\n                ...x,\n                status: x.data?.account ? \"reconnecting\" : \"connecting\"\n            }));\n        const sorted = (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateGet)(this, _lastUsedConnector) ? [\n            ...this.connectors\n        ].sort((x)=>x.id === (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateGet)(this, _lastUsedConnector) ? -1 : 1) : this.connectors;\n        let connected = false;\n        for (const connector of sorted){\n            if (!connector.ready || !connector.isAuthorized) continue;\n            const isAuthorized = await connector.isAuthorized();\n            if (!isAuthorized) continue;\n            const data = await connector.connect();\n            this.setState((x)=>({\n                    ...x,\n                    connector,\n                    chains: connector?.chains,\n                    data,\n                    status: \"connected\"\n                }));\n            connected = true;\n            break;\n        }\n        if (!connected) this.setState((x)=>({\n                ...x,\n                data: void 0,\n                status: \"disconnected\"\n            }));\n        (0,_chunk_MQXBDTVK_js__WEBPACK_IMPORTED_MODULE_5__.__privateSet)(this, _isAutoConnecting, false);\n        return this.data;\n    }\n    getProvider({ bust, chainId } = {}) {\n        let provider_ = this.providers.get(chainId ?? -1);\n        if (provider_ && !bust) return provider_;\n        const { provider } = this.config;\n        provider_ = typeof provider === \"function\" ? provider({\n            chainId\n        }) : provider;\n        this.providers.set(chainId ?? -1, provider_);\n        return provider_;\n    }\n    getWebSocketProvider({ bust, chainId } = {}) {\n        let webSocketProvider_ = this.webSocketProviders.get(chainId ?? -1);\n        if (webSocketProvider_ && !bust) return webSocketProvider_;\n        const { webSocketProvider } = this.config;\n        webSocketProvider_ = typeof webSocketProvider === \"function\" ? webSocketProvider({\n            chainId\n        }) : webSocketProvider;\n        if (webSocketProvider_) this.webSocketProviders.set(chainId ?? -1, webSocketProvider_);\n        return webSocketProvider_;\n    }\n    setLastUsedConnector(lastUsedConnector = null) {\n        this.storage?.setItem(\"wallet\", lastUsedConnector);\n    }\n};\n_isAutoConnecting = new WeakMap();\n_lastUsedConnector = new WeakMap();\n_addEffects = new WeakSet();\naddEffects_fn = function() {\n    const onChange = (data)=>{\n        this.setState((x)=>({\n                ...x,\n                data: {\n                    ...x.data,\n                    ...data\n                }\n            }));\n    };\n    const onDisconnect = ()=>{\n        this.clearState();\n    };\n    const onError = (error)=>{\n        this.setState((x)=>({\n                ...x,\n                error\n            }));\n    };\n    this.store.subscribe(({ connector })=>connector, (connector, prevConnector)=>{\n        prevConnector?.off?.(\"change\", onChange);\n        prevConnector?.off?.(\"disconnect\", onDisconnect);\n        prevConnector?.off?.(\"error\", onError);\n        if (!connector) return;\n        connector.on?.(\"change\", onChange);\n        connector.on?.(\"disconnect\", onDisconnect);\n        connector.on?.(\"error\", onError);\n    });\n    const { provider, webSocketProvider } = this.config;\n    const subscribeProvider = typeof provider === \"function\";\n    const subscribeWebSocketProvider = typeof webSocketProvider === \"function\";\n    if (subscribeProvider || subscribeWebSocketProvider) this.store.subscribe(({ data })=>data?.chain?.id, (chainId)=>{\n        this.setState((x)=>({\n                ...x,\n                provider: this.getProvider({\n                    bust: true,\n                    chainId\n                }),\n                webSocketProvider: this.getWebSocketProvider({\n                    bust: true,\n                    chainId\n                })\n            }));\n    });\n};\nvar client;\nfunction createClient(config) {\n    const client_ = new Client(config);\n    client = client_;\n    return client_;\n}\nfunction getClient() {\n    if (!client) {\n        throw new Error(\"No wagmi client found. Ensure you have set up a client: https://wagmi.sh/react/client\");\n    }\n    return client;\n}\n// src/actions/accounts/connect.ts\nasync function connect({ chainId, connector }) {\n    const client2 = getClient();\n    const activeConnector = client2.connector;\n    if (activeConnector && connector.id === activeConnector.id) throw new ConnectorAlreadyConnectedError();\n    try {\n        client2.setState((x)=>({\n                ...x,\n                status: \"connecting\"\n            }));\n        const data = await connector.connect({\n            chainId\n        });\n        client2.setLastUsedConnector(connector.id);\n        client2.setState((x)=>({\n                ...x,\n                connector,\n                chains: connector?.chains,\n                data,\n                status: \"connected\"\n            }));\n        client2.storage.setItem(\"connected\", true);\n        return {\n            ...data,\n            connector\n        };\n    } catch (err) {\n        client2.setState((x)=>{\n            return {\n                ...x,\n                status: x.connector ? \"connected\" : \"disconnected\"\n            };\n        });\n        throw err;\n    }\n}\n// src/actions/accounts/disconnect.ts\nasync function disconnect() {\n    const client2 = getClient();\n    if (client2.connector) await client2.connector.disconnect();\n    client2.clearState();\n    client2.storage.removeItem(\"connected\");\n}\n// src/actions/accounts/fetchBalance.ts\n\n// src/constants/abis.ts\nvar erc20ABI = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    }\n];\nvar erc20ABI_bytes32 = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"allowance\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"decimals\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint8\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bytes32\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transfer\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    }\n];\nvar erc721ABI = [\n    {\n        type: \"event\",\n        name: \"Approval\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"ApprovalForAll\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"operator\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"approved\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"event\",\n        name: \"Transfer\",\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"approve\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"balanceOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"getApproved\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"isApprovedForAll\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"operator\",\n                type: \"address\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"name\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"ownerOf\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"safeTransferFrom\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"safeTransferFrom\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"id\",\n                type: \"uint256\"\n            },\n            {\n                name: \"data\",\n                type: \"bytes\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"setApprovalForAll\",\n        stateMutability: \"nonpayable\",\n        inputs: [\n            {\n                name: \"operator\",\n                type: \"address\"\n            },\n            {\n                name: \"approved\",\n                type: \"bool\"\n            }\n        ],\n        outputs: []\n    },\n    {\n        type: \"function\",\n        name: \"symbol\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenByIndex\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"index\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenByIndex\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"index\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"tokenURI\",\n        stateMutability: \"view\",\n        inputs: [\n            {\n                name: \"tokenId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: [\n            {\n                name: \"\",\n                type: \"string\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"totalSupply\",\n        stateMutability: \"view\",\n        inputs: [],\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ]\n    },\n    {\n        type: \"function\",\n        name: \"transferFrom\",\n        stateMutability: \"payable\",\n        inputs: [\n            {\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                name: \"recipient\",\n                type: \"address\"\n            },\n            {\n                name: \"tokeId\",\n                type: \"uint256\"\n            }\n        ],\n        outputs: []\n    }\n];\nvar multicallABI = [\n    {\n        inputs: [\n            {\n                components: [\n                    {\n                        name: \"target\",\n                        type: \"address\"\n                    },\n                    {\n                        name: \"allowFailure\",\n                        type: \"bool\"\n                    },\n                    {\n                        name: \"callData\",\n                        type: \"bytes\"\n                    }\n                ],\n                name: \"calls\",\n                type: \"tuple[]\"\n            }\n        ],\n        name: \"aggregate3\",\n        outputs: [\n            {\n                components: [\n                    {\n                        name: \"success\",\n                        type: \"bool\"\n                    },\n                    {\n                        name: \"returnData\",\n                        type: \"bytes\"\n                    }\n                ],\n                name: \"returnData\",\n                type: \"tuple[]\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    }\n];\nvar erc4626ABI = [\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Approval\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Deposit\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"value\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Transfer\",\n        type: \"event\"\n    },\n    {\n        anonymous: false,\n        inputs: [\n            {\n                indexed: true,\n                name: \"sender\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                indexed: true,\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                indexed: false,\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                indexed: false,\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"Withdraw\",\n        type: \"event\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            },\n            {\n                name: \"spender\",\n                type: \"address\"\n            }\n        ],\n        name: \"allowance\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"spender\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"approve\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"asset\",\n        outputs: [\n            {\n                name: \"assetTokenAddress\",\n                type: \"address\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"account\",\n                type: \"address\"\n            }\n        ],\n        name: \"balanceOf\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"convertToAssets\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"convertToShares\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            }\n        ],\n        name: \"deposit\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"caller\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxDeposit\",\n        outputs: [\n            {\n                name: \"maxAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"caller\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxMint\",\n        outputs: [\n            {\n                name: \"maxShares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxRedeem\",\n        outputs: [\n            {\n                name: \"maxShares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"maxWithdraw\",\n        outputs: [\n            {\n                name: \"maxAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            }\n        ],\n        name: \"mint\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewDeposit\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewMint\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewRedeem\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"previewWithdraw\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"redeem\",\n        outputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"totalAssets\",\n        outputs: [\n            {\n                name: \"totalManagedAssets\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"view\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transfer\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"from\",\n                type: \"address\"\n            },\n            {\n                name: \"to\",\n                type: \"address\"\n            },\n            {\n                name: \"amount\",\n                type: \"uint256\"\n            }\n        ],\n        name: \"transferFrom\",\n        outputs: [\n            {\n                name: \"\",\n                type: \"bool\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    },\n    {\n        inputs: [\n            {\n                name: \"assets\",\n                type: \"uint256\"\n            },\n            {\n                name: \"receiver\",\n                type: \"address\"\n            },\n            {\n                name: \"owner\",\n                type: \"address\"\n            }\n        ],\n        name: \"withdraw\",\n        outputs: [\n            {\n                name: \"shares\",\n                type: \"uint256\"\n            }\n        ],\n        stateMutability: \"nonpayable\",\n        type: \"function\"\n    }\n];\n// src/constants/units.ts\nvar units = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\"\n];\n// src/actions/contracts/fetchToken.ts\n\nasync function fetchToken({ address, chainId, formatUnits: units2 = \"ether\" }) {\n    async function fetchToken_({ abi }) {\n        const erc20Config = {\n            address,\n            abi,\n            chainId\n        };\n        const [decimals, name, symbol, totalSupply] = await readContracts({\n            allowFailure: false,\n            contracts: [\n                {\n                    ...erc20Config,\n                    functionName: \"decimals\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"name\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"symbol\"\n                },\n                {\n                    ...erc20Config,\n                    functionName: \"totalSupply\"\n                }\n            ]\n        });\n        return {\n            address,\n            decimals,\n            name,\n            symbol,\n            totalSupply: {\n                formatted: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(totalSupply, units2),\n                value: totalSupply\n            }\n        };\n    }\n    try {\n        return await fetchToken_({\n            abi: erc20ABI\n        });\n    } catch (err) {\n        if (err instanceof ContractResultDecodeError) {\n            const { name, symbol, ...rest } = await fetchToken_({\n                abi: erc20ABI_bytes32\n            });\n            return {\n                name: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseBytes32String)(name),\n                symbol: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseBytes32String)(symbol),\n                ...rest\n            };\n        }\n        throw err;\n    }\n}\n// src/actions/contracts/getContract.ts\n\nfunction getContract({ address, abi, signerOrProvider }) {\n    return new ethers__WEBPACK_IMPORTED_MODULE_3__.Contract(address, abi, signerOrProvider);\n}\n// src/actions/contracts/prepareWriteContract.ts\nasync function prepareWriteContract({ abi, address, chainId, functionName, overrides, signer: signer_, ...config }) {\n    const signer = signer_ ?? await fetchSigner({\n        chainId\n    });\n    if (!signer) throw new ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId,\n        signer\n    });\n    const contract = getContract({\n        address,\n        abi,\n        signerOrProvider: signer\n    });\n    const args = config.args;\n    const normalizedFunctionName = normalizeFunctionName({\n        contract,\n        functionName,\n        args\n    });\n    const populateTransactionFn = contract.populateTransaction[normalizedFunctionName];\n    if (!populateTransactionFn) throw new ContractMethodDoesNotExistError({\n        address,\n        functionName: normalizedFunctionName\n    });\n    const params = [\n        ...args ?? [],\n        ...overrides ? [\n            overrides\n        ] : []\n    ];\n    const unsignedTransaction = await populateTransactionFn(...params);\n    const gasLimit = unsignedTransaction.gasLimit || await signer.estimateGas(unsignedTransaction);\n    const minimizedAbi = minimizeContractInterface({\n        abi,\n        functionName\n    });\n    return {\n        abi: minimizedAbi,\n        address,\n        chainId,\n        functionName,\n        mode: \"prepared\",\n        request: {\n            ...unsignedTransaction,\n            gasLimit\n        }\n    };\n}\n// src/actions/providers/getProvider.ts\nfunction getProvider({ chainId } = {}) {\n    const client2 = getClient();\n    if (chainId) return client2.getProvider({\n        chainId\n    }) || client2.provider;\n    return client2.provider;\n}\n// src/actions/providers/getWebSocketProvider.ts\nfunction getWebSocketProvider({ chainId } = {}) {\n    const client2 = getClient();\n    if (chainId) return client2.getWebSocketProvider({\n        chainId\n    }) || client2.webSocketProvider;\n    return client2.webSocketProvider;\n}\n// src/actions/providers/watchProvider.ts\nfunction watchProvider(args, callback) {\n    const client2 = getClient();\n    const handleChange = async ()=>callback(getProvider(args));\n    const unsubscribe = client2.subscribe(({ provider })=>provider, handleChange);\n    return unsubscribe;\n}\n// src/actions/providers/watchWebSocketProvider.ts\nfunction watchWebSocketProvider(args, callback) {\n    const client2 = getClient();\n    const handleChange = async ()=>callback(getWebSocketProvider(args));\n    const unsubscribe = client2.subscribe(({ webSocketProvider })=>webSocketProvider, handleChange);\n    return unsubscribe;\n}\n// src/actions/contracts/multicall.ts\nasync function multicall({ allowFailure = true, chainId: chainIdOverride, contracts, overrides }) {\n    const provider = getProvider({\n        chainId: chainIdOverride\n    });\n    if (!provider.chains?.[0]) throw new ProviderChainsNotFound();\n    const chainId = provider.network.chainId;\n    if (typeof chainIdOverride !== \"undefined\" && chainIdOverride !== chainId) throw new ChainNotConfiguredError({\n        chainId: chainIdOverride\n    });\n    const chain = provider.chains.find((chain2)=>chain2.id === chainId);\n    if (!chain) throw new ChainNotConfiguredError({\n        chainId\n    });\n    if (!chain?.contracts?.multicall3) throw new ChainDoesNotSupportMulticallError({\n        chain\n    });\n    if (typeof overrides?.blockTag === \"number\" && overrides?.blockTag < (chain.contracts.multicall3.blockCreated ?? 0)) throw new ChainDoesNotSupportMulticallError({\n        blockNumber: overrides?.blockTag,\n        chain\n    });\n    const multicallContract = getContract({\n        address: chain.contracts.multicall3.address,\n        abi: multicallABI,\n        signerOrProvider: provider\n    });\n    const calls = contracts.map(({ address, abi, functionName, ...config })=>{\n        const { args } = config || {};\n        const contract = getContract({\n            address,\n            abi\n        });\n        const params2 = args ?? [];\n        const normalizedFunctionName = normalizeFunctionName({\n            contract,\n            functionName,\n            args\n        });\n        try {\n            const contractFunction = contract[normalizedFunctionName];\n            if (!contractFunction) logWarn(`\"${normalizedFunctionName}\" is not in the interface for contract \"${address}\"`);\n            const callData = contract.interface.encodeFunctionData(normalizedFunctionName, params2);\n            return {\n                target: address,\n                allowFailure,\n                callData\n            };\n        } catch (err) {\n            if (!allowFailure) throw err;\n            return {\n                target: address,\n                allowFailure,\n                callData: \"0x\"\n            };\n        }\n    });\n    const params = [\n        ...[\n            calls\n        ],\n        ...overrides ? [\n            overrides\n        ] : []\n    ];\n    const results = await multicallContract.aggregate3(...params);\n    return results.map(({ returnData, success }, i)=>{\n        const { address, abi, functionName, ...rest } = contracts[i];\n        const contract = getContract({\n            address,\n            abi\n        });\n        const args = rest.args;\n        const normalizedFunctionName = normalizeFunctionName({\n            contract,\n            functionName,\n            args\n        });\n        if (!success) {\n            let error;\n            try {\n                contract.interface.decodeFunctionResult(normalizedFunctionName, returnData);\n            } catch (err) {\n                error = new ContractMethodRevertedError({\n                    address,\n                    args,\n                    chainId: chain.id,\n                    functionName: normalizedFunctionName,\n                    errorMessage: err.message\n                });\n                if (!allowFailure) throw error;\n                logWarn(error.message);\n            }\n            return null;\n        }\n        if (returnData === \"0x\") {\n            const error = new ContractMethodNoResultError({\n                address,\n                args,\n                chainId: chain.id,\n                functionName: normalizedFunctionName\n            });\n            if (!allowFailure) throw error;\n            logWarn(error.message);\n            return null;\n        }\n        try {\n            const result = contract.interface.decodeFunctionResult(normalizedFunctionName, returnData);\n            return Array.isArray(result) && result.length === 1 ? result[0] : result;\n        } catch (err) {\n            const error = new ContractResultDecodeError({\n                address,\n                args,\n                chainId: chain.id,\n                functionName: normalizedFunctionName,\n                errorMessage: err.message\n            });\n            if (!allowFailure) throw error;\n            logWarn(error.message);\n            return null;\n        }\n    });\n}\n// src/actions/contracts/readContract.ts\nasync function readContract({ address, chainId, abi, functionName, overrides, ...config }) {\n    const provider = getProvider({\n        chainId\n    });\n    const contract = getContract({\n        address,\n        abi,\n        signerOrProvider: provider\n    });\n    const args = config.args;\n    const normalizedFunctionName = normalizeFunctionName({\n        contract,\n        functionName,\n        args\n    });\n    const contractFunction = contract[normalizedFunctionName];\n    if (!contractFunction) throw new ContractMethodDoesNotExistError({\n        address,\n        functionName: normalizedFunctionName\n    });\n    const params = [\n        ...args ?? [],\n        ...overrides ? [\n            overrides\n        ] : []\n    ];\n    return contractFunction?.(...params);\n}\n// src/actions/contracts/readContracts.ts\nasync function readContracts({ allowFailure = true, contracts, overrides }) {\n    try {\n        const provider = getProvider();\n        const contractsByChainId = contracts.reduce((contracts2, contract, index)=>{\n            const chainId = contract.chainId ?? provider.network.chainId;\n            return {\n                ...contracts2,\n                [chainId]: [\n                    ...contracts2[chainId] || [],\n                    {\n                        contract,\n                        index\n                    }\n                ]\n            };\n        }, {});\n        const promises = ()=>Object.entries(contractsByChainId).map(([chainId, contracts2])=>multicall({\n                    allowFailure,\n                    chainId: parseInt(chainId),\n                    contracts: contracts2.map(({ contract })=>contract),\n                    overrides\n                }));\n        let multicallResults;\n        if (allowFailure) {\n            multicallResults = (await Promise.allSettled(promises())).map((result)=>{\n                if (result.status === \"fulfilled\") return result.value;\n                if (result.reason instanceof ChainDoesNotSupportMulticallError) {\n                    logWarn(result.reason.message);\n                    throw result.reason;\n                }\n                return null;\n            }).flat();\n        } else {\n            multicallResults = (await Promise.all(promises())).flat();\n        }\n        const resultIndexes = Object.values(contractsByChainId).map((contracts2)=>contracts2.map(({ index })=>index)).flat();\n        return multicallResults.reduce((results, result, index)=>{\n            if (results) results[resultIndexes[index]] = result;\n            return results;\n        }, []);\n    } catch (err) {\n        if (err instanceof ContractResultDecodeError) throw err;\n        if (err instanceof ContractMethodNoResultError) throw err;\n        if (err instanceof ContractMethodRevertedError) throw err;\n        const promises = ()=>contracts.map((contract)=>readContract({\n                    ...contract,\n                    overrides\n                }));\n        if (allowFailure) return (await Promise.allSettled(promises())).map((result, i)=>{\n            if (result.status === \"fulfilled\") return result.value;\n            const { address, args, chainId, functionName } = contracts[i];\n            const error = new ContractMethodRevertedError({\n                address,\n                functionName,\n                chainId: chainId ?? 1,\n                args,\n                errorMessage: result.reason\n            });\n            logWarn(error.message);\n            return null;\n        });\n        return await Promise.all(promises());\n    }\n}\n// src/actions/contracts/watchContractEvent.ts\n\nfunction watchContractEvent({ address, abi, chainId, eventName, once }, callback) {\n    const handler = (...event)=>callback(...event);\n    let contract;\n    const watchEvent = async ()=>{\n        if (contract) contract?.off(eventName, handler);\n        const signerOrProvider = getWebSocketProvider({\n            chainId\n        }) || getProvider({\n            chainId\n        });\n        contract = getContract({\n            address,\n            abi,\n            signerOrProvider\n        });\n        if (once) contract.once(eventName, handler);\n        else contract.on(eventName, handler);\n    };\n    watchEvent();\n    const client2 = getClient();\n    const unsubscribe = client2.subscribe(({ provider, webSocketProvider })=>({\n            provider,\n            webSocketProvider\n        }), watchEvent, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__.shallow\n    });\n    return ()=>{\n        contract?.off(eventName, handler);\n        unsubscribe();\n    };\n}\n// src/actions/network-status/watchBlockNumber.ts\n\n// src/actions/network-status/fetchBlockNumber.ts\nasync function fetchBlockNumber({ chainId } = {}) {\n    const provider = getProvider({\n        chainId\n    });\n    const blockNumber = await provider.getBlockNumber();\n    return blockNumber;\n}\n// src/actions/network-status/watchBlockNumber.ts\nfunction watchBlockNumber(args, callback) {\n    const debouncedCallback = debounce(callback, 1);\n    let previousProvider;\n    const createListener = (provider)=>{\n        if (previousProvider) {\n            previousProvider?.off(\"block\", debouncedCallback);\n        }\n        provider.on(\"block\", debouncedCallback);\n        previousProvider = provider;\n    };\n    const provider_ = getWebSocketProvider({\n        chainId: args.chainId\n    }) ?? getProvider({\n        chainId: args.chainId\n    });\n    if (args.listen) createListener(provider_);\n    let active = true;\n    const client2 = getClient();\n    const unsubscribe = client2.subscribe(({ provider, webSocketProvider })=>({\n            provider,\n            webSocketProvider\n        }), async ({ provider, webSocketProvider })=>{\n        const provider_2 = webSocketProvider ?? provider;\n        if (args.listen && !args.chainId && provider_2) {\n            createListener(provider_2);\n        }\n        const blockNumber = await fetchBlockNumber({\n            chainId: args.chainId\n        });\n        if (!active) return;\n        callback(blockNumber);\n    }, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__.shallow\n    });\n    return ()=>{\n        active = false;\n        unsubscribe();\n        provider_?.off(\"block\", debouncedCallback);\n        previousProvider?.off(\"block\", debouncedCallback);\n    };\n}\n// src/actions/contracts/watchMulticall.ts\nfunction watchMulticall(config, callback) {\n    const client2 = getClient();\n    const handleChange = async ()=>callback(await multicall(config));\n    const unwatch = config.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = client2.subscribe(({ provider })=>provider, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchReadContract.ts\nfunction watchReadContract(config, callback) {\n    const client2 = getClient();\n    const handleChange = async ()=>callback(await readContract(config));\n    const unwatch = config.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = client2.subscribe(({ provider })=>provider, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/contracts/watchReadContracts.ts\nfunction watchReadContracts(config, callback) {\n    const client2 = getClient();\n    const handleChange = async ()=>callback(await readContracts(config));\n    const unwatch = config.listenToBlock ? watchBlockNumber({\n        listen: true\n    }, handleChange) : void 0;\n    const unsubscribe = client2.subscribe(({ provider })=>provider, handleChange);\n    return ()=>{\n        unsubscribe();\n        unwatch?.();\n    };\n}\n// src/actions/transactions/fetchTransaction.ts\nasync function fetchTransaction({ chainId, hash }) {\n    const provider = getProvider({\n        chainId\n    });\n    return provider.getTransaction(hash);\n}\n// src/actions/transactions/prepareSendTransaction.ts\n\n// src/actions/ens/fetchEnsAddress.ts\n\nasync function fetchEnsAddress({ chainId, name }) {\n    const provider = getProvider({\n        chainId\n    });\n    const address = await provider.resolveName(name);\n    try {\n        return address ? (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(address) : null;\n    } catch (_error) {\n        return null;\n    }\n}\n// src/actions/ens/fetchEnsAvatar.ts\nasync function fetchEnsAvatar({ address, chainId }) {\n    const provider = getProvider({\n        chainId\n    });\n    const avatar = await provider.getAvatar(address);\n    return avatar;\n}\n// src/actions/ens/fetchEnsName.ts\n\nasync function fetchEnsName({ address, chainId }) {\n    const provider = getProvider({\n        chainId\n    });\n    return provider.lookupAddress((0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAddress)(address));\n}\n// src/actions/ens/fetchEnsResolver.ts\nasync function fetchEnsResolver({ chainId, name }) {\n    const provider = getProvider({\n        chainId\n    });\n    const resolver = await provider.getResolver(name);\n    return resolver;\n}\n// src/actions/transactions/prepareSendTransaction.ts\nasync function prepareSendTransaction({ chainId, request, signer: signer_ }) {\n    const signer = signer_ ?? await fetchSigner({\n        chainId\n    });\n    if (!signer) throw new ConnectorNotFoundError();\n    if (chainId) assertActiveChain({\n        chainId,\n        signer\n    });\n    const [to, gasLimit] = await Promise.all([\n        (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.isAddress)(request.to) ? Promise.resolve(request.to) : fetchEnsAddress({\n            name: request.to\n        }),\n        request.gasLimit ? Promise.resolve(request.gasLimit) : signer.estimateGas(request)\n    ]);\n    if (!to) throw new Error(\"Could not resolve ENS name\");\n    return {\n        ...chainId ? {\n            chainId\n        } : {},\n        request: {\n            ...request,\n            gasLimit,\n            to\n        },\n        mode: \"prepared\"\n    };\n}\n// src/actions/transactions/sendTransaction.ts\nasync function sendTransaction({ chainId, mode, request }) {\n    const signer = await fetchSigner();\n    if (!signer) throw new ConnectorNotFoundError();\n    if (mode === \"prepared\") {\n        if (!request.gasLimit) throw new Error(\"`gasLimit` is required\");\n        if (!request.to) throw new Error(\"`to` is required\");\n    }\n    if (chainId) assertActiveChain({\n        chainId,\n        signer\n    });\n    try {\n        const uncheckedSigner = signer.connectUnchecked?.();\n        const { hash, wait } = await (uncheckedSigner ?? signer).sendTransaction(request);\n        return {\n            hash,\n            wait\n        };\n    } catch (error) {\n        if (error.code === 4001 || error.code === \"ACTION_REJECTED\") throw new UserRejectedRequestError(error);\n        throw error;\n    }\n}\n// src/actions/transactions/waitForTransaction.ts\n\n// src/actions/network-status/fetchFeeData.ts\n\nasync function fetchFeeData({ chainId, formatUnits: units2 = \"wei\" } = {}) {\n    const provider = getProvider({\n        chainId\n    });\n    const feeData = await provider.getFeeData();\n    const formatted = {\n        gasPrice: feeData.gasPrice ? (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(feeData.gasPrice, units2) : null,\n        maxFeePerGas: feeData.maxFeePerGas ? (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(feeData.maxFeePerGas, units2) : null,\n        maxPriorityFeePerGas: feeData.maxPriorityFeePerGas ? (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(feeData.maxPriorityFeePerGas, units2) : null\n    };\n    return {\n        ...feeData,\n        formatted\n    };\n}\n// src/actions/transactions/waitForTransaction.ts\nasync function waitForTransaction({ chainId, confirmations = 1, hash, onSpeedUp, timeout = 0 }) {\n    const provider = getProvider({\n        chainId\n    });\n    const [blockNumber, transaction] = await Promise.all([\n        fetchBlockNumber(),\n        fetchTransaction({\n            hash\n        })\n    ]);\n    let replaceable = null;\n    if (confirmations !== 0 && transaction?.to) {\n        replaceable = {\n            data: transaction.data,\n            from: transaction.from,\n            nonce: transaction.nonce,\n            startBlock: blockNumber,\n            to: transaction.to,\n            value: transaction.value\n        };\n    }\n    try {\n        const receipt = await provider._waitForTransaction(hash, confirmations, timeout, replaceable);\n        if (receipt.status === 0) {\n            const code = await provider.call(receipt, receipt.blockNumber);\n            const reason = (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.toUtf8String)(`0x${code.substring(138)}`);\n            throw new Error(reason);\n        }\n        return receipt;\n    } catch (err) {\n        if (err?.reason === \"repriced\") {\n            onSpeedUp?.(err.replacement);\n            return waitForTransaction({\n                hash: err.replacement?.hash,\n                confirmations,\n                timeout\n            });\n        }\n        throw err;\n    }\n}\n// src/actions/transactions/watchPendingTransactions.ts\n\nfunction watchPendingTransactions(args, callback) {\n    let previousProvider;\n    const createListener = (provider)=>{\n        if (previousProvider) {\n            previousProvider?.off(\"pending\", callback);\n        }\n        provider.on(\"pending\", callback);\n        previousProvider = provider;\n    };\n    const provider_ = getWebSocketProvider({\n        chainId: args.chainId\n    }) ?? getProvider({\n        chainId: args.chainId\n    });\n    createListener(provider_);\n    const client2 = getClient();\n    const unsubscribe = client2.subscribe(({ provider, webSocketProvider })=>({\n            provider,\n            webSocketProvider\n        }), async ({ provider, webSocketProvider })=>{\n        const provider_2 = webSocketProvider ?? provider;\n        if (!args.chainId && provider_2) {\n            createListener(provider_2);\n        }\n    }, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__.shallow\n    });\n    return ()=>{\n        unsubscribe();\n        provider_?.off(\"pending\", callback);\n        previousProvider?.off(\"pending\", callback);\n    };\n}\n// src/actions/contracts/writeContract.ts\nasync function writeContract(config) {\n    const signer = await fetchSigner();\n    if (!signer) throw new ConnectorNotFoundError();\n    if (config.chainId) assertActiveChain({\n        chainId: config.chainId,\n        signer\n    });\n    let request;\n    if (config.mode === \"prepared\") {\n        request = config.request;\n    } else {\n        request = (await prepareWriteContract({\n            address: config.address,\n            args: config.args,\n            chainId: config.chainId,\n            abi: config.abi,\n            functionName: config.functionName,\n            overrides: config.overrides\n        })).request;\n    }\n    const transaction = await sendTransaction({\n        request,\n        mode: \"prepared\"\n    });\n    return transaction;\n}\n// src/actions/accounts/fetchBalance.ts\nasync function fetchBalance({ address, chainId, formatUnits: unit, token }) {\n    const client2 = getClient();\n    const provider = getProvider({\n        chainId\n    });\n    if (token) {\n        const fetchContractBalance = async ({ abi })=>{\n            const erc20Config = {\n                abi,\n                address: token,\n                chainId\n            };\n            const [value2, decimals, symbol] = await readContracts({\n                allowFailure: false,\n                contracts: [\n                    {\n                        ...erc20Config,\n                        functionName: \"balanceOf\",\n                        args: [\n                            address\n                        ]\n                    },\n                    {\n                        ...erc20Config,\n                        functionName: \"decimals\"\n                    },\n                    {\n                        ...erc20Config,\n                        functionName: \"symbol\"\n                    }\n                ]\n            });\n            return {\n                decimals,\n                formatted: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(value2 ?? \"0\", unit ?? decimals),\n                symbol,\n                value: value2\n            };\n        };\n        try {\n            return await fetchContractBalance({\n                abi: erc20ABI\n            });\n        } catch (err) {\n            if (err instanceof ContractResultDecodeError) {\n                const { symbol, ...rest } = await fetchContractBalance({\n                    abi: erc20ABI_bytes32\n                });\n                return {\n                    symbol: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.parseBytes32String)(symbol),\n                    ...rest\n                };\n            }\n            throw err;\n        }\n    }\n    const chains = [\n        ...client2.provider.chains || [],\n        ...client2.chains ?? []\n    ];\n    const value = await provider.getBalance(address);\n    const chain = chains.find((x)=>x.id === provider.network.chainId);\n    return {\n        decimals: chain?.nativeCurrency.decimals ?? 18,\n        formatted: (0,ethers_lib_utils_js__WEBPACK_IMPORTED_MODULE_2__.formatUnits)(value ?? \"0\", unit ?? \"ether\"),\n        symbol: chain?.nativeCurrency.symbol ?? \"ETH\",\n        value\n    };\n}\n// src/actions/accounts/fetchSigner.ts\nasync function fetchSigner({ chainId } = {}) {\n    const client2 = getClient();\n    const signer = await client2.connector?.getSigner?.({\n        chainId\n    }) || null;\n    return signer;\n}\n// src/actions/accounts/getAccount.ts\nfunction getAccount() {\n    const { data, connector, status } = getClient();\n    switch(status){\n        case \"connected\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: true,\n                isConnecting: false,\n                isDisconnected: false,\n                isReconnecting: false,\n                status\n            };\n        case \"reconnecting\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: !!data?.account,\n                isConnecting: false,\n                isDisconnected: false,\n                isReconnecting: true,\n                status\n            };\n        case \"connecting\":\n            return {\n                address: data?.account,\n                connector,\n                isConnected: false,\n                isConnecting: true,\n                isDisconnected: false,\n                isReconnecting: false,\n                status\n            };\n        case \"disconnected\":\n            return {\n                address: void 0,\n                connector: void 0,\n                isConnected: false,\n                isConnecting: false,\n                isDisconnected: true,\n                isReconnecting: false,\n                status\n            };\n    }\n}\n// src/actions/accounts/getNetwork.ts\nfunction getNetwork() {\n    const client2 = getClient();\n    const chainId = client2.data?.chain?.id;\n    const activeChains = client2.chains ?? [];\n    const activeChain = [\n        ...client2.provider.chains || [],\n        ...activeChains\n    ].find((x)=>x.id === chainId) ?? {\n        id: chainId,\n        name: `Chain ${chainId}`,\n        network: `${chainId}`,\n        nativeCurrency: {\n            name: \"Ether\",\n            decimals: 18,\n            symbol: \"ETH\"\n        },\n        rpcUrls: {\n            default: {\n                http: [\n                    \"\"\n                ]\n            },\n            public: {\n                http: [\n                    \"\"\n                ]\n            }\n        }\n    };\n    return {\n        chain: chainId ? {\n            ...activeChain,\n            ...client2.data?.chain,\n            id: chainId\n        } : void 0,\n        chains: activeChains\n    };\n}\n// src/actions/accounts/signMessage.ts\nasync function signMessage(args) {\n    try {\n        const signer = await fetchSigner();\n        if (!signer) throw new ConnectorNotFoundError();\n        return await signer.signMessage(args.message);\n    } catch (error) {\n        if (error.code === 4001 || error.code === \"ACTION_REJECTED\") throw new UserRejectedRequestError(error);\n        throw error;\n    }\n}\n// src/actions/accounts/signTypedData.ts\nasync function signTypedData({ domain, types, value }) {\n    const signer = await fetchSigner();\n    if (!signer) throw new ConnectorNotFoundError();\n    const { chainId: chainId_ } = domain;\n    const chainId = chainId_ ? normalizeChainId(chainId_) : void 0;\n    if (chainId) assertActiveChain({\n        chainId,\n        signer\n    });\n    const types_ = Object.entries(types).filter(([key])=>key !== \"EIP712Domain\").reduce((types2, [key, attributes])=>{\n        types2[key] = attributes.filter((attr)=>attr.type !== \"EIP712Domain\");\n        return types2;\n    }, {});\n    try {\n        return await signer._signTypedData(domain, types_, value);\n    } catch (error) {\n        if (error.code === 4001 || error.code === \"ACTION_REJECTED\") throw new UserRejectedRequestError(error);\n        throw error;\n    }\n}\n// src/actions/accounts/switchNetwork.ts\nasync function switchNetwork({ chainId }) {\n    const { connector } = getClient();\n    if (!connector) throw new ConnectorNotFoundError();\n    if (!connector.switchChain) throw new SwitchChainNotSupportedError({\n        connector\n    });\n    return connector.switchChain(chainId);\n}\n// src/actions/accounts/watchAccount.ts\n\nfunction watchAccount(callback, { selector = (x)=>x } = {}) {\n    const client2 = getClient();\n    const handleChange = ()=>callback(getAccount());\n    const unsubscribe = client2.subscribe(({ data, connector, status })=>selector({\n            address: data?.account,\n            connector,\n            status\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/accounts/watchNetwork.ts\n\nfunction watchNetwork(callback, { selector = (x)=>x } = {}) {\n    const client2 = getClient();\n    const handleChange = ()=>callback(getNetwork());\n    const unsubscribe = client2.subscribe(({ data, chains })=>selector({\n            chainId: data?.chain?.id,\n            chains\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__.shallow\n    });\n    return unsubscribe;\n}\n// src/actions/accounts/watchSigner.ts\n\nfunction watchSigner({ chainId }, callback) {\n    const client2 = getClient();\n    const handleChange = async ({ chainId: chainId_ })=>{\n        if (chainId && chainId_ && chainId !== chainId_) return;\n        const signer = await fetchSigner({\n            chainId\n        });\n        if (!getClient().connector) return callback(null);\n        return callback(signer);\n    };\n    const unsubscribe = client2.subscribe(({ data, connector })=>({\n            account: data?.account,\n            chainId: data?.chain?.id,\n            connector\n        }), handleChange, {\n        equalityFn: zustand_shallow__WEBPACK_IMPORTED_MODULE_8__.shallow\n    });\n    return unsubscribe;\n}\n// src/errors.ts\nvar RpcError = class extends Error {\n    constructor(message, options){\n        const { cause, code, data } = options;\n        if (!Number.isInteger(code)) throw new Error('\"code\" must be an integer.');\n        if (!message || typeof message !== \"string\") throw new Error('\"message\" must be a nonempty string.');\n        super(message);\n        this.cause = cause;\n        this.code = code;\n        this.data = data;\n    }\n};\nvar ProviderRpcError = class extends RpcError {\n    constructor(message, options){\n        const { cause, code, data } = options;\n        if (!(Number.isInteger(code) && code >= 1e3 && code <= 4999)) throw new Error('\"code\" must be an integer such that: 1000 <= code <= 4999');\n        super(message, {\n            cause,\n            code,\n            data\n        });\n    }\n};\nvar AddChainError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"AddChainError\";\n        this.message = \"Error adding chain\";\n    }\n};\nvar ChainDoesNotSupportMulticallError = class extends Error {\n    constructor({ blockNumber, chain }){\n        super(`Chain \"${chain.name}\" does not support multicall${blockNumber ? ` on block ${blockNumber}` : \"\"}.`);\n        this.name = \"ChainDoesNotSupportMulticall\";\n    }\n};\nvar ChainMismatchError = class extends Error {\n    constructor({ activeChain, targetChain }){\n        super(`Chain mismatch: Expected \"${targetChain}\", received \"${activeChain}\".`);\n        this.name = \"ChainMismatchError\";\n    }\n};\nvar ChainNotConfiguredError = class extends Error {\n    constructor({ chainId, connectorId }){\n        super(`Chain \"${chainId}\" not configured${connectorId ? ` for connector \"${connectorId}\"` : \"\"}.`);\n        this.name = \"ChainNotConfigured\";\n    }\n};\nvar ConnectorAlreadyConnectedError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConnectorAlreadyConnectedError\";\n        this.message = \"Connector already connected\";\n    }\n};\nvar ConnectorNotFoundError = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ConnectorNotFoundError\";\n        this.message = \"Connector not found\";\n    }\n};\nvar ContractMethodDoesNotExistError = class extends Error {\n    constructor({ address, chainId, functionName }){\n        const { chains, network } = getProvider();\n        const chain = chains?.find(({ id })=>id === (chainId || network.chainId));\n        const blockExplorer = chain?.blockExplorers?.default;\n        super([\n            `Function \"${functionName}\" on contract \"${address}\" does not exist.`,\n            ...blockExplorer ? [\n                \"\",\n                `${blockExplorer?.name}: ${blockExplorer?.url}/address/${address}#readContract`\n            ] : []\n        ].join(\"\\n\"));\n        this.name = \"ContractMethodDoesNotExistError\";\n    }\n};\nvar ContractMethodNoResultError = class extends Error {\n    constructor({ address, args, chainId, functionName }){\n        super([\n            \"Contract read returned an empty response. This could be due to any of the following:\",\n            `- The contract does not have the function \"${functionName}\",`,\n            \"- The parameters passed to the contract function may be invalid, or\",\n            \"- The address is not a contract.\",\n            \"\",\n            `Config:`,\n            JSON.stringify({\n                address,\n                abi: \"...\",\n                functionName,\n                chainId,\n                args\n            }, null, 2)\n        ].join(\"\\n\"));\n        this.name = \"ContractMethodNoResultError\";\n    }\n};\nvar ContractMethodRevertedError = class extends Error {\n    constructor({ address, args, chainId, functionName, errorMessage }){\n        super([\n            \"Contract method reverted with an error.\",\n            \"\",\n            `Config:`,\n            JSON.stringify({\n                address,\n                abi: \"...\",\n                functionName,\n                chainId,\n                args\n            }, null, 2),\n            \"\",\n            `Details: ${errorMessage}`\n        ].join(\"\\n\"));\n        this.name = \"ContractMethodRevertedError\";\n    }\n};\nvar ContractResultDecodeError = class extends Error {\n    constructor({ address, args, chainId, functionName, errorMessage }){\n        super([\n            \"Failed to decode contract function result.\",\n            \"\",\n            `Config:`,\n            JSON.stringify({\n                address,\n                abi: \"...\",\n                functionName,\n                chainId,\n                args\n            }, null, 2),\n            \"\",\n            `Details: ${errorMessage}`\n        ].join(\"\\n\"));\n        this.name = \"ContractResultDecodeError\";\n    }\n};\nvar ProviderChainsNotFound = class extends Error {\n    constructor(){\n        super(...arguments);\n        this.name = \"ProviderChainsNotFound\";\n        this.message = [\n            \"No chains were found on the wagmi provider. Some functions that require a chain may not work.\",\n            \"\",\n            \"It is recommended to add a list of chains to the provider in `createClient`.\",\n            \"\",\n            \"Example:\",\n            \"\",\n            \"```\",\n            \"import { getDefaultProvider } from 'ethers'\",\n            \"import { chain, createClient } from 'wagmi'\",\n            \"\",\n            \"createClient({\",\n            \"  provider: Object.assign(getDefaultProvider(), { chains: [chain.mainnet] })\",\n            \"})\",\n            \"```\"\n        ].join(\"\\n\");\n    }\n};\nvar ResourceUnavailableError = class extends RpcError {\n    constructor(cause){\n        super(\"Resource unavailable\", {\n            cause,\n            code: -32002\n        });\n        this.name = \"ResourceUnavailable\";\n    }\n};\nvar SwitchChainError = class extends ProviderRpcError {\n    constructor(cause){\n        super(\"Error switching chain\", {\n            cause,\n            code: 4902\n        });\n        this.name = \"SwitchChainError\";\n    }\n};\nvar SwitchChainNotSupportedError = class extends Error {\n    constructor({ connector }){\n        super(`\"${connector.name}\" does not support programmatic chain switching.`);\n        this.name = \"SwitchChainNotSupportedError\";\n    }\n};\nvar UserRejectedRequestError = class extends ProviderRpcError {\n    constructor(cause){\n        super(\"User rejected request\", {\n            cause,\n            code: 4001\n        });\n        this.name = \"UserRejectedRequestError\";\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/chunk-GISSYJN5.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js":
/*!*********************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __privateAdd: () => (/* binding */ __privateAdd),\n/* harmony export */   __privateGet: () => (/* binding */ __privateGet),\n/* harmony export */   __privateMethod: () => (/* binding */ __privateMethod),\n/* harmony export */   __privateSet: () => (/* binding */ __privateSet)\n/* harmony export */ });\nvar __accessCheck = (obj, member, msg)=>{\n    if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter)=>{\n    __accessCheck(obj, member, \"read from private field\");\n    return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value)=>{\n    if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter)=>{\n    __accessCheck(obj, member, \"write to private field\");\n    setter ? setter.call(obj, value) : member.set(obj, value);\n    return value;\n};\nvar __privateMethod = (obj, member, method)=>{\n    __accessCheck(obj, member, \"access private method\");\n    return method;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9jaHVuay1NUVhCRFRWSy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsZ0JBQWdCLENBQUNDLEtBQUtDLFFBQVFDO0lBQ2hDLElBQUksQ0FBQ0QsT0FBT0UsR0FBRyxDQUFDSCxNQUNkLE1BQU1JLFVBQVUsWUFBWUY7QUFDaEM7QUFDQSxJQUFJRyxlQUFlLENBQUNMLEtBQUtDLFFBQVFLO0lBQy9CUCxjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9LLFNBQVNBLE9BQU9DLElBQUksQ0FBQ1AsT0FBT0MsT0FBT08sR0FBRyxDQUFDUjtBQUNoRDtBQUNBLElBQUlTLGVBQWUsQ0FBQ1QsS0FBS0MsUUFBUVM7SUFDL0IsSUFBSVQsT0FBT0UsR0FBRyxDQUFDSCxNQUNiLE1BQU1JLFVBQVU7SUFDbEJILGtCQUFrQlUsVUFBVVYsT0FBT1csR0FBRyxDQUFDWixPQUFPQyxPQUFPWSxHQUFHLENBQUNiLEtBQUtVO0FBQ2hFO0FBQ0EsSUFBSUksZUFBZSxDQUFDZCxLQUFLQyxRQUFRUyxPQUFPSztJQUN0Q2hCLGNBQWNDLEtBQUtDLFFBQVE7SUFDM0JjLFNBQVNBLE9BQU9SLElBQUksQ0FBQ1AsS0FBS1UsU0FBU1QsT0FBT1ksR0FBRyxDQUFDYixLQUFLVTtJQUNuRCxPQUFPQTtBQUNUO0FBQ0EsSUFBSU0sa0JBQWtCLENBQUNoQixLQUFLQyxRQUFRZ0I7SUFDbENsQixjQUFjQyxLQUFLQyxRQUFRO0lBQzNCLE9BQU9nQjtBQUNUO0FBT0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pbml0LXdhZ21pLWV0aGVyLW9sZC12ZXJzaW9uLy4vbm9kZV9tb2R1bGVzL0B3YWdtaS9jb3JlL2Rpc3QvY2h1bmstTVFYQkRUVksuanM/N2NjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hY2Nlc3NDaGVjayA9IChvYmosIG1lbWJlciwgbXNnKSA9PiB7XG4gIGlmICghbWVtYmVyLmhhcyhvYmopKVxuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbm5vdCBcIiArIG1zZyk7XG59O1xudmFyIF9fcHJpdmF0ZUdldCA9IChvYmosIG1lbWJlciwgZ2V0dGVyKSA9PiB7XG4gIF9fYWNjZXNzQ2hlY2sob2JqLCBtZW1iZXIsIFwicmVhZCBmcm9tIHByaXZhdGUgZmllbGRcIik7XG4gIHJldHVybiBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogbWVtYmVyLmdldChvYmopO1xufTtcbnZhciBfX3ByaXZhdGVBZGQgPSAob2JqLCBtZW1iZXIsIHZhbHVlKSA9PiB7XG4gIGlmIChtZW1iZXIuaGFzKG9iaikpXG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCB0aGUgc2FtZSBwcml2YXRlIG1lbWJlciBtb3JlIHRoYW4gb25jZVwiKTtcbiAgbWVtYmVyIGluc3RhbmNlb2YgV2Vha1NldCA/IG1lbWJlci5hZGQob2JqKSA6IG1lbWJlci5zZXQob2JqLCB2YWx1ZSk7XG59O1xudmFyIF9fcHJpdmF0ZVNldCA9IChvYmosIG1lbWJlciwgdmFsdWUsIHNldHRlcikgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcIndyaXRlIHRvIHByaXZhdGUgZmllbGRcIik7XG4gIHNldHRlciA/IHNldHRlci5jYWxsKG9iaiwgdmFsdWUpIDogbWVtYmVyLnNldChvYmosIHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufTtcbnZhciBfX3ByaXZhdGVNZXRob2QgPSAob2JqLCBtZW1iZXIsIG1ldGhvZCkgPT4ge1xuICBfX2FjY2Vzc0NoZWNrKG9iaiwgbWVtYmVyLCBcImFjY2VzcyBwcml2YXRlIG1ldGhvZFwiKTtcbiAgcmV0dXJuIG1ldGhvZDtcbn07XG5cbmV4cG9ydCB7XG4gIF9fcHJpdmF0ZUdldCxcbiAgX19wcml2YXRlQWRkLFxuICBfX3ByaXZhdGVTZXQsXG4gIF9fcHJpdmF0ZU1ldGhvZFxufTtcbiJdLCJuYW1lcyI6WyJfX2FjY2Vzc0NoZWNrIiwib2JqIiwibWVtYmVyIiwibXNnIiwiaGFzIiwiVHlwZUVycm9yIiwiX19wcml2YXRlR2V0IiwiZ2V0dGVyIiwiY2FsbCIsImdldCIsIl9fcHJpdmF0ZUFkZCIsInZhbHVlIiwiV2Vha1NldCIsImFkZCIsInNldCIsIl9fcHJpdmF0ZVNldCIsInNldHRlciIsIl9fcHJpdmF0ZU1ldGhvZCIsIm1ldGhvZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/chunk-MQXBDTVK.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@wagmi/core/dist/providers/jsonRpc.js":
/*!************************************************************!*\
  !*** ./node_modules/@wagmi/core/dist/providers/jsonRpc.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   jsonRpcProvider: () => (/* binding */ jsonRpcProvider)\n/* harmony export */ });\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/providers/lib.esm/websocket-provider.js\");\n\n// src/providers/jsonRpc.ts\n\nfunction jsonRpcProvider({ priority, rpc, stallTimeout, static: static_ = true, weight }) {\n    return function(chain) {\n        const rpcConfig = rpc(chain);\n        if (!rpcConfig || rpcConfig.http === \"\") return null;\n        return {\n            chain: {\n                ...chain,\n                rpcUrls: {\n                    ...chain.rpcUrls,\n                    default: {\n                        http: [\n                            rpcConfig.http\n                        ]\n                    }\n                }\n            },\n            provider: ()=>{\n                const RpcProvider = static_ ? ethers__WEBPACK_IMPORTED_MODULE_0__.StaticJsonRpcProvider : ethers__WEBPACK_IMPORTED_MODULE_1__.JsonRpcProvider;\n                const provider = new RpcProvider(rpcConfig.http, {\n                    ensAddress: chain.contracts?.ensRegistry?.address,\n                    chainId: chain.id,\n                    name: chain.network\n                });\n                return Object.assign(provider, {\n                    priority,\n                    stallTimeout,\n                    weight\n                });\n            },\n            ...rpcConfig.webSocket && {\n                webSocketProvider: ()=>new ethers__WEBPACK_IMPORTED_MODULE_2__.WebSocketProvider(rpcConfig.webSocket, chain.id)\n            }\n        };\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHdhZ21pL2NvcmUvZGlzdC9wcm92aWRlcnMvanNvblJwYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQThCO0FBRTlCLDJCQUEyQjtBQUNRO0FBQ25DLFNBQVNDLGdCQUFnQixFQUN2QkMsUUFBUSxFQUNSQyxHQUFHLEVBQ0hDLFlBQVksRUFDWkMsUUFBUUMsVUFBVSxJQUFJLEVBQ3RCQyxNQUFNLEVBQ1A7SUFDQyxPQUFPLFNBQVNDLEtBQUs7UUFDbkIsTUFBTUMsWUFBWU4sSUFBSUs7UUFDdEIsSUFBSSxDQUFDQyxhQUFhQSxVQUFVQyxJQUFJLEtBQUssSUFDbkMsT0FBTztRQUNULE9BQU87WUFDTEYsT0FBTztnQkFDTCxHQUFHQSxLQUFLO2dCQUNSRyxTQUFTO29CQUNQLEdBQUdILE1BQU1HLE9BQU87b0JBQ2hCQyxTQUFTO3dCQUFFRixNQUFNOzRCQUFDRCxVQUFVQyxJQUFJO3lCQUFDO29CQUFDO2dCQUNwQztZQUNGO1lBQ0FHLFVBQVU7Z0JBQ1IsTUFBTUMsY0FBY1IsVUFBVU4seURBQStCLEdBQUdBLG1EQUF5QjtnQkFDekYsTUFBTWEsV0FBVyxJQUFJQyxZQUFZTCxVQUFVQyxJQUFJLEVBQUU7b0JBQy9DTyxZQUFZVCxNQUFNVSxTQUFTLEVBQUVDLGFBQWFDO29CQUMxQ0MsU0FBU2IsTUFBTWMsRUFBRTtvQkFDakJDLE1BQU1mLE1BQU1nQixPQUFPO2dCQUNyQjtnQkFDQSxPQUFPQyxPQUFPQyxNQUFNLENBQUNiLFVBQVU7b0JBQUVYO29CQUFVRTtvQkFBY0c7Z0JBQU87WUFDbEU7WUFDQSxHQUFHRSxVQUFVa0IsU0FBUyxJQUFJO2dCQUN4QkMsbUJBQW1CLElBQU0sSUFBSTVCLHFEQUEyQixDQUN0RFMsVUFBVWtCLFNBQVMsRUFDbkJuQixNQUFNYyxFQUFFO1lBRVosQ0FBQztRQUNIO0lBQ0Y7QUFDRjtBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW5pdC13YWdtaS1ldGhlci1vbGQtdmVyc2lvbi8uL25vZGVfbW9kdWxlcy9Ad2FnbWkvY29yZS9kaXN0L3Byb3ZpZGVycy9qc29uUnBjLmpzPzI0NDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFwiLi4vY2h1bmstTVFYQkRUVksuanNcIjtcblxuLy8gc3JjL3Byb3ZpZGVycy9qc29uUnBjLnRzXG5pbXBvcnQgeyBwcm92aWRlcnMgfSBmcm9tIFwiZXRoZXJzXCI7XG5mdW5jdGlvbiBqc29uUnBjUHJvdmlkZXIoe1xuICBwcmlvcml0eSxcbiAgcnBjLFxuICBzdGFsbFRpbWVvdXQsXG4gIHN0YXRpYzogc3RhdGljXyA9IHRydWUsXG4gIHdlaWdodFxufSkge1xuICByZXR1cm4gZnVuY3Rpb24oY2hhaW4pIHtcbiAgICBjb25zdCBycGNDb25maWcgPSBycGMoY2hhaW4pO1xuICAgIGlmICghcnBjQ29uZmlnIHx8IHJwY0NvbmZpZy5odHRwID09PSBcIlwiKVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNoYWluOiB7XG4gICAgICAgIC4uLmNoYWluLFxuICAgICAgICBycGNVcmxzOiB7XG4gICAgICAgICAgLi4uY2hhaW4ucnBjVXJscyxcbiAgICAgICAgICBkZWZhdWx0OiB7IGh0dHA6IFtycGNDb25maWcuaHR0cF0gfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvdmlkZXI6ICgpID0+IHtcbiAgICAgICAgY29uc3QgUnBjUHJvdmlkZXIgPSBzdGF0aWNfID8gcHJvdmlkZXJzLlN0YXRpY0pzb25ScGNQcm92aWRlciA6IHByb3ZpZGVycy5Kc29uUnBjUHJvdmlkZXI7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IFJwY1Byb3ZpZGVyKHJwY0NvbmZpZy5odHRwLCB7XG4gICAgICAgICAgZW5zQWRkcmVzczogY2hhaW4uY29udHJhY3RzPy5lbnNSZWdpc3RyeT8uYWRkcmVzcyxcbiAgICAgICAgICBjaGFpbklkOiBjaGFpbi5pZCxcbiAgICAgICAgICBuYW1lOiBjaGFpbi5uZXR3b3JrXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwcm92aWRlciwgeyBwcmlvcml0eSwgc3RhbGxUaW1lb3V0LCB3ZWlnaHQgfSk7XG4gICAgICB9LFxuICAgICAgLi4ucnBjQ29uZmlnLndlYlNvY2tldCAmJiB7XG4gICAgICAgIHdlYlNvY2tldFByb3ZpZGVyOiAoKSA9PiBuZXcgcHJvdmlkZXJzLldlYlNvY2tldFByb3ZpZGVyKFxuICAgICAgICAgIHJwY0NvbmZpZy53ZWJTb2NrZXQsXG4gICAgICAgICAgY2hhaW4uaWRcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5leHBvcnQge1xuICBqc29uUnBjUHJvdmlkZXJcbn07XG4iXSwibmFtZXMiOlsicHJvdmlkZXJzIiwianNvblJwY1Byb3ZpZGVyIiwicHJpb3JpdHkiLCJycGMiLCJzdGFsbFRpbWVvdXQiLCJzdGF0aWMiLCJzdGF0aWNfIiwid2VpZ2h0IiwiY2hhaW4iLCJycGNDb25maWciLCJodHRwIiwicnBjVXJscyIsImRlZmF1bHQiLCJwcm92aWRlciIsIlJwY1Byb3ZpZGVyIiwiU3RhdGljSnNvblJwY1Byb3ZpZGVyIiwiSnNvblJwY1Byb3ZpZGVyIiwiZW5zQWRkcmVzcyIsImNvbnRyYWN0cyIsImVuc1JlZ2lzdHJ5IiwiYWRkcmVzcyIsImNoYWluSWQiLCJpZCIsIm5hbWUiLCJuZXR3b3JrIiwiT2JqZWN0IiwiYXNzaWduIiwid2ViU29ja2V0Iiwid2ViU29ja2V0UHJvdmlkZXIiLCJXZWJTb2NrZXRQcm92aWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@wagmi/core/dist/providers/jsonRpc.js\n");

/***/ })

};
;